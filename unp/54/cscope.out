cscope 15 $HOME/study/unp/54 -c -q 0000002251 0000194745
	@echo_server.c

1 #include 
	~<stdlib.h
>

2 #include 
	~<stdio.h
>

3 #include 
	~<unistd.h
>

4 #include 
	~<sys/types.h
>

5 #include 
	~<sys/socket.h
>

6 #include 
	~<netinet/in.h
>

7 #include 
	~<netdb.h
>

8 #include 
	~<arpa/inet.h
>

9 #include 
	~<string.h
>

10 void 
str_echo
(
clifd
);

11 int 
	$main
(int 
arg
, char *
argv
[])

13 int 
listenfd
, 
connfd
;

14 
pid_t
 
childpid
;

15 
socklen_t
 
chilen
;

16 char 
buff
[128];

17 struct 
sockaddr_in
 
cliaddr
, 
servaddr
;

18 if( (
listenfd
 = 
	`socket
(
AF_INET
,
SOCK_STREAM
, 0) ) < 0)

19 
	`printf
("socket error");

20 
	`memset
(&
servaddr
, 0, sizeof(
listenfd
));

21 
servaddr
.
sin_family
 = 
AF_INET
;

22 
servaddr
.
sin_addr
.
s_addr
 = 
	`htonl
(
INADDR_ANY
);

23 
servaddr
.
sin_port
 = 
	`htons
(9877);

24 
	`bind
(
listenfd
, (struct 
sockaddr
*)&
servaddr
, sizeof(servaddr));

25 
	`listen
(
listenfd
, 1);

27 
	`printf
("waiting connection");

28 if((
connfd
 = 
	`accept
(
listenfd
, (struct 
sockaddr
 *)&
cliaddr
,&
chilen
)) == -1){

29 
	`printf
("accept error");

32 
	`printf
("connection from %s port %d",

33 
	`inet_ntop
(
AF_INET
, &
cliaddr
.
sin_addr
, 
buff
, sizeof(buff)),

34 
	`ntohs
(
cliaddr
.
sin_port
));

35 
	`str_echo
(
clifd
);

36 
	`close
(
connfd
);

39 
	}
}

41 void 
str_echo
(int 
clifd
);

	@/usr/include/arpa/inet.h

18 #ifndef 
_ARPA_INET_H


19 #define 
	#_ARPA_INET_H
 1

	)

21 #include 
	~<features.h
>

22 #include 
	~<netinet/in.h
>

25 #ifndef 
__socklen_t_defined


26 typedef 
__socklen_t
 
	tsocklen_t
;

27 #define 
	#__socklen_t_defined


	)

30 
__BEGIN_DECLS


34 extern 
in_addr_t
 
	$inet_addr
 (const char *
__cp
) 
__THROW
;

37 extern 
in_addr_t
 
	$inet_lnaof
 (struct 
in_addr
 
__in
) 
__THROW
;

41 extern struct 
in_addr
 
	$inet_makeaddr
 (
in_addr_t
 
__net
, in_addr_t 
__host
)

42 
__THROW
;

45 extern 
in_addr_t
 
	$inet_netof
 (struct 
in_addr
 
__in
) 
__THROW
;

49 extern 
in_addr_t
 
	$inet_network
 (const char *
__cp
) 
__THROW
;

53 extern char *
	$inet_ntoa
 (struct 
in_addr
 
__in
) 
__THROW
;

58 extern int 
	$inet_pton
 (int 
__af
, const char *
__restrict
 
__cp
,

59 void *
__restrict
 
__buf
) 
__THROW
;

64 extern const char *
	$inet_ntop
 (int 
__af
, const void *
__restrict
 
__cp
,

65 char *
__restrict
 
__buf
, 
socklen_t
 
__len
)

66 
__THROW
;

70 #ifdef 
__USE_MISC


73 extern int 
	$inet_aton
 (const char *
__cp
, struct 
in_addr
 *
__inp
) 
__THROW
;

77 extern char *
	$inet_neta
 (
in_addr_t
 
__net
, char *
__buf
, 
size_t
 
__len
) 
__THROW
;

82 extern char *
	$inet_net_ntop
 (int 
__af
, const void *
__cp
, int 
__bits
,

83 char *
__buf
, 
size_t
 
__len
) 
__THROW
;

88 extern int 
	$inet_net_pton
 (int 
__af
, const char *
__cp
,

89 void *
__buf
, 
size_t
 
__len
) 
__THROW
;

94 extern unsigned int 
	$inet_nsap_addr
 (const char *
__cp
,

95 unsigned char *
__buf
, int 
__len
) 
__THROW
;

99 extern char *
	$inet_nsap_ntoa
 (int 
__len
, const unsigned char *
__cp
,

100 char *
__buf
) 
__THROW
;

103 
__END_DECLS


	@/usr/include/netdb.h

22 #ifndef 
_NETDB_H


23 #define 
	#_NETDB_H
 1

	)

25 #include 
	~<features.h
>

27 #include 
	~<netinet/in.h
>

28 #include 
	~<stdint.h
>

29 #ifdef 
__USE_MISC


32 #include 
	~<rpc/netdb.h
>

35 #ifdef 
__USE_GNU


36 #define 
	#__need_sigevent_t


	)

37 #include 
	~<bits/siginfo.h
>

38 #define 
	#__need_timespec


	)

39 #include 
	~<time.h
>

42 #include 
	~<bits/netdb.h
>

45 #define 
	#_PATH_HEQUIV
 "/etc/hosts.equiv"

	)

46 #define 
	#_PATH_HOSTS
 "/etc/hosts"

	)

47 #define 
	#_PATH_NETWORKS
 "/etc/networks"

	)

48 #define 
	#_PATH_NSSWITCH_CONF
 "/etc/nsswitch.conf"

	)

49 #define 
	#_PATH_PROTOCOLS
 "/etc/protocols"

	)

50 #define 
	#_PATH_SERVICES
 "/etc/services"

	)

53 
	g__BEGIN_DECLS


55 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8


58 #define 
	#h_errno
 (*
	`__h_errno_location
 ())

	)

61 extern int *
	$__h_errno_location
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

65 #define 
	#HOST_NOT_FOUND
 1

	)

66 #define 
	#TRY_AGAIN
 2

	)

68 #define 
	#NO_RECOVERY
 3

	)

70 #define 
	#NO_DATA
 4

	)

73 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


74 #define 
	#NETDB_INTERNAL
 -1

	)

75 #define 
	#NETDB_SUCCESS
 0

	)

76 #define 
	#NO_ADDRESS
 
NO_DATA


	)

79 #if 
defined
 
__USE_XOPEN2K
 || defined 
__USE_XOPEN_EXTENDED


81 #define 
	#IPPORT_RESERVED
 1024

	)

84 #ifdef 
__USE_GNU


86 #define 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifdef 
__USE_MISC


92 extern void 
	$herror
 (const char *
__str
) 
__THROW
;

95 extern const char *
	$hstrerror
 (int 
__err_num
) 
__THROW
;

100 struct 
	shostent


102 char *
h_name
;

103 char **
h_aliases
;

104 int 
h_addrtype
;

105 int 
h_length
;

106 char **
h_addr_list
;

107 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


108 #define 
	#h_addr
 
h_addr_list
[0]

	)

117 extern void 
	`sethostent
 (int 
__stay_open
);

123 extern void 
	`endhostent
 (void);

130 extern struct 
hostent
 *
	`gethostent
 (void);

137 extern struct 
hostent
 *
	`gethostbyaddr
 (const void *
__addr
, 
__socklen_t
 
__len
,

138 int 
__type
);

144 extern struct 
hostent
 *
	`gethostbyname
 (const char *
__name
);

146 #ifdef 
__USE_MISC


155 extern struct 
hostent
 *
	`gethostbyname2
 (const char *
__name
, int 
__af
);

167 extern int 
	`gethostent_r
 (struct 
hostent
 *
__restrict
 
__result_buf
,

168 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

169 struct 
hostent
 **
__restrict
 
__result
,

170 int *
__restrict
 
__h_errnop
);

172 extern int 
	`gethostbyaddr_r
 (const void *
__restrict
 
__addr
, 
__socklen_t
 
__len
,

173 int 
__type
,

174 struct 
hostent
 *
__restrict
 
__result_buf
,

175 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

176 struct 
hostent
 **
__restrict
 
__result
,

177 int *
__restrict
 
__h_errnop
);

179 extern int 
	`gethostbyname_r
 (const char *
__restrict
 
__name
,

180 struct 
hostent
 *
__restrict
 
__result_buf
,

181 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

182 struct 
hostent
 **
__restrict
 
__result
,

183 int *
__restrict
 
__h_errnop
);

185 extern int 
	`gethostbyname2_r
 (const char *
__restrict
 
__name
, int 
__af
,

186 struct 
hostent
 *
__restrict
 
__result_buf
,

187 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

188 struct 
hostent
 **
__restrict
 
__result
,

189 int *
__restrict
 
__h_errnop
);

198 extern void 
	`setnetent
 (int 
__stay_open
);

204 extern void 
	`endnetent
 (void);

211 extern struct 
netent
 *
	`getnetent
 (void);

218 extern struct 
netent
 *
	`getnetbyaddr
 (
uint32_t
 
__net
, int 
__type
);

224 extern struct 
netent
 *
	`getnetbyname
 (const char *
__name
);

226 #ifdef 
__USE_MISC


237 extern int 
	`getnetent_r
 (struct 
netent
 *
__restrict
 
__result_buf
,

238 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

239 struct 
netent
 **
__restrict
 
__result
,

240 int *
__restrict
 
__h_errnop
);

242 extern int 
	`getnetbyaddr_r
 (
uint32_t
 
__net
, int 
__type
,

243 struct 
netent
 *
__restrict
 
__result_buf
,

244 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

245 struct 
netent
 **
__restrict
 
__result
,

246 int *
__restrict
 
__h_errnop
);

248 extern int 
	`getnetbyname_r
 (const char *
__restrict
 
__name
,

249 struct 
netent
 *
__restrict
 
__result_buf
,

250 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

251 struct 
netent
 **
__restrict
 
__result
,

252 int *
__restrict
 
__h_errnop
);

257 struct 
	sservent


259 char *
s_name
;

260 char **
s_aliases
;

261 int 
s_port
;

262 char *
s_proto
;

270 extern void 
	`setservent
 (int 
__stay_open
);

276 extern void 
	`endservent
 (void);

283 extern struct 
servent
 *
	`getservent
 (void);

290 extern struct 
servent
 *
	`getservbyname
 (const char *
__name
, const char *
__proto
);

297 extern struct 
servent
 *
	`getservbyport
 (int 
__port
, const char *
__proto
);

300 #ifdef 
__USE_MISC


308 extern int 
	`getservent_r
 (struct 
servent
 *
__restrict
 
__result_buf
,

309 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

310 struct 
servent
 **
__restrict
 
__result
);

312 extern int 
	`getservbyname_r
 (const char *
__restrict
 
__name
,

313 const char *
__restrict
 
__proto
,

314 struct 
servent
 *
__restrict
 
__result_buf
,

315 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

316 struct 
servent
 **
__restrict
 
__result
);

318 extern int 
	`getservbyport_r
 (int 
__port
, const char *
__restrict
 
__proto
,

319 struct 
servent
 *
__restrict
 
__result_buf
,

320 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

321 struct 
servent
 **
__restrict
 
__result
);

326 struct 
	sprotoent


328 char *
p_name
;

329 char **
p_aliases
;

330 int 
p_proto
;

338 extern void 
	`setprotoent
 (int 
__stay_open
);

344 extern void 
	`endprotoent
 (void);

351 extern struct 
protoent
 *
	`getprotoent
 (void);

357 extern struct 
protoent
 *
	`getprotobyname
 (const char *
__name
);

363 extern struct 
protoent
 *
	`getprotobynumber
 (int 
__proto
);

366 #ifdef 
__USE_MISC


374 extern int 
	`getprotoent_r
 (struct 
protoent
 *
__restrict
 
__result_buf
,

375 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

376 struct 
protoent
 **
__restrict
 
__result
);

378 extern int 
	`getprotobyname_r
 (const char *
__restrict
 
__name
,

379 struct 
protoent
 *
__restrict
 
__result_buf
,

380 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

381 struct 
protoent
 **
__restrict
 
__result
);

383 extern int 
	`getprotobynumber_r
 (int 
__proto
,

384 struct 
protoent
 *
__restrict
 
__result_buf
,

385 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

386 struct 
protoent
 **
__restrict
 
__result
);

395 extern int 
	`setnetgrent
 (const char *
__netgroup
);

403 extern void 
	`endnetgrent
 (void);

412 extern int 
	`getnetgrent
 (char **
__restrict
 
__hostp
,

413 char **
__restrict
 
__userp
,

414 char **
__restrict
 
__domainp
);

423 extern int 
	`innetgr
 (const char *
__netgroup
, const char *
__host
,

424 const char *
__user
, const char *
__domain
);

432 extern int 
	`getnetgrent_r
 (char **
__restrict
 
__hostp
,

433 char **
__restrict
 
__userp
,

434 char **
__restrict
 
__domainp
,

435 char *
__restrict
 
__buffer
, 
size_t
 
__buflen
);

439 #ifdef 
__USE_BSD


451 extern int 
	`rcmd
 (char **
__restrict
 
__ahost
, unsigned short int 
__rport
,

452 const char *
__restrict
 
__locuser
,

453 const char *
__restrict
 
__remuser
,

454 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
);

463 extern int 
	`rcmd_af
 (char **
__restrict
 
__ahost
, unsigned short int 
__rport
,

464 const char *
__restrict
 
__locuser
,

465 const char *
__restrict
 
__remuser
,

466 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
,

467 
sa_family_t
 
__af
);

479 extern int 
	`rexec
 (char **
__restrict
 
__ahost
, int 
__rport
,

480 const char *
__restrict
 
__name
,

481 const char *
__restrict
 
__pass
,

482 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
);

491 extern int 
	`rexec_af
 (char **
__restrict
 
__ahost
, int 
__rport
,

492 const char *
__restrict
 
__name
,

493 const char *
__restrict
 
__pass
,

494 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
,

495 
sa_family_t
 
__af
);

505 extern int 
	`ruserok
 (const char *
__rhost
, int 
__suser
,

506 const char *
__remuser
, const char *
__locuser
);

515 extern int 
	`ruserok_af
 (const char *
__rhost
, int 
__suser
,

516 const char *
__remuser
, const char *
__locuser
,

517 
sa_family_t
 
__af
);

528 extern int 
	`iruserok
 (
uint32_t
 
__raddr
, int 
__suser
,

529 const char *
__remuser
, const char *
__locuser
);

539 extern int 
	`iruserok_af
 (const void *
__raddr
, int 
__suser
,

540 const char *
__remuser
, const char *
__locuser
,

541 
sa_family_t
 
__af
);

551 extern int 
	`rresvport
 (int *
__alport
);

560 extern int 
	`rresvport_af
 (int *
__alport
, 
sa_family_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 struct 
	saddrinfo


569 int 
ai_flags
;

570 int 
ai_family
;

571 int 
ai_socktype
;

572 int 
ai_protocol
;

573 
socklen_t
 
ai_addrlen
;

574 struct 
sockaddr
 *
ai_addr
;

575 char *
ai_canonname
;

576 struct 
addrinfo
 *
ai_next
;

579 #ifdef 
__USE_GNU


581 struct 
	sgaicb


583 const char *
ar_name
;

584 const char *
ar_service
;

585 const struct 
addrinfo
 *
ar_request
;

586 struct 
addrinfo
 *
ar_result
;

588 int 
__return
;

589 int 
__glibc_reserved
[5];

593 #define 
	#GAI_WAIT
 0

	)

594 #define 
	#GAI_NOWAIT
 1

	)

598 #define 
	#AI_PASSIVE
 0x0001

	)

599 #define 
	#AI_CANONNAME
 0x0002

	)

600 #define 
	#AI_NUMERICHOST
 0x0004

	)

601 #define 
	#AI_V4MAPPED
 0x0008

	)

602 #define 
	#AI_ALL
 0x0010

	)

603 #define 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifdef 
__USE_GNU


606 #define 
	#AI_IDN
 0x0040

	)

609 #define 
	#AI_CANONIDN
 0x0080

	)

610 #define 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 #define 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 #define 
	#AI_NUMERICSERV
 0x0400

	)

618 #define 
	#EAI_BADFLAGS
 -1

	)

619 #define 
	#EAI_NONAME
 -2

	)

620 #define 
	#EAI_AGAIN
 -3

	)

621 #define 
	#EAI_FAIL
 -4

	)

622 #define 
	#EAI_FAMILY
 -6

	)

623 #define 
	#EAI_SOCKTYPE
 -7

	)

624 #define 
	#EAI_SERVICE
 -8

	)

625 #define 
	#EAI_MEMORY
 -10

	)

626 #define 
	#EAI_SYSTEM
 -11

	)

627 #define 
	#EAI_OVERFLOW
 -12

	)

628 #ifdef 
__USE_GNU


629 #define 
	#EAI_NODATA
 -5

	)

630 #define 
	#EAI_ADDRFAMILY
 -9

	)

631 #define 
	#EAI_INPROGRESS
 -100

	)

632 #define 
	#EAI_CANCELED
 -101

	)

633 #define 
	#EAI_NOTCANCELED
 -102

	)

634 #define 
	#EAI_ALLDONE
 -103

	)

635 #define 
	#EAI_INTR
 -104

	)

636 #define 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifdef 
__USE_MISC


640 #define 
	#NI_MAXHOST
 1025

	)

641 #define 
	#NI_MAXSERV
 32

	)

644 #define 
	#NI_NUMERICHOST
 1

	)

645 #define 
	#NI_NUMERICSERV
 2

	)

646 #define 
	#NI_NOFQDN
 4

	)

647 #define 
	#NI_NAMEREQD
 8

	)

648 #define 
	#NI_DGRAM
 16

	)

649 #ifdef 
__USE_GNU


650 #define 
	#NI_IDN
 32

	)

651 #define 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 #define 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 extern int 
	`getaddrinfo
 (const char *
__restrict
 
__name
,

663 const char *
__restrict
 
__service
,

664 const struct 
addrinfo
 *
__restrict
 
__req
,

665 struct 
addrinfo
 **
__restrict
 
__pai
);

668 extern void 
	$freeaddrinfo
 (struct 
addrinfo
 *
__ai
) 
__THROW
;

671 extern const char *
	$gai_strerror
 (int 
__ecode
) 
__THROW
;

677 extern int 
	`getnameinfo
 (const struct 
sockaddr
 *
__restrict
 
__sa
,

678 
socklen_t
 
__salen
, char *
__restrict
 
__host
,

679 
socklen_t
 
__hostlen
, char *
__restrict
 
__serv
,

680 
socklen_t
 
__servlen
, int 
__flags
);

683 #ifdef 
__USE_GNU


692 extern int 
	`getaddrinfo_a
 (int 
__mode
, struct 
gaicb
 *
__list
[
__restrict_arr
],

693 int 
__ent
, struct 
sigevent
 *
__restrict
 
__sig
);

703 extern int 
	`gai_suspend
 (const struct 
gaicb
 *const 
__list
[], int 
__ent
,

704 const struct 
timespec
 *
__timeout
);

707 extern int 
	$gai_error
 (struct 
gaicb
 *
__req
) 
__THROW
;

710 extern int 
	$gai_cancel
 (struct 
gaicb
 *
__gaicbp
) 
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #ifndef 
_NETINET_IN_H


19 #define 
	#_NETINET_IN_H
 1

	)

21 #include 
	~<features.h
>

22 #include 
	~<stdint.h
>

23 #include 
	~<sys/socket.h
>

24 #include 
	~<bits/types.h
>

27 
__BEGIN_DECLS


30 typedef 
uint32_t
 
	tin_addr_t
;

31 struct 
	sin_addr


33 
in_addr_t
 
	ms_addr
;

37 #include 
	~<bits/in.h
>

42 
	mIPPROTO_IP
 = 0,

43 #define 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 #define 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 #define 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 #define 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 #define 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 #define 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 #define 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 #define 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 #define 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 #define 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 #define 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 #define 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 #define 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 #define 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 #define 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 #define 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 #define 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 #define 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 #define 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 #define 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 #define 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 #define 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 #define 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 #define 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #ifndef 
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 #define 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 #define 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 #define 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 #define 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 #define 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 #define 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 #define 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 typedef 
uint16_t
 
	tin_port_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 #define 
	#IN_CLASSA
(
a
) ((((
in_addr_t
)(a)) & 0x80000000) == 0)

	)

165 #define 
	#IN_CLASSA_NET
 0xff000000

	)

166 #define 
	#IN_CLASSA_NSHIFT
 24

	)

167 #define 
	#IN_CLASSA_HOST
 (0xffffffff & ~
IN_CLASSA_NET
)

	)

168 #define 
	#IN_CLASSA_MAX
 128

	)

170 #define 
	#IN_CLASSB
(
a
) ((((
in_addr_t
)(a)) & 0xc0000000) == 0x80000000)

	)

171 #define 
	#IN_CLASSB_NET
 0xffff0000

	)

172 #define 
	#IN_CLASSB_NSHIFT
 16

	)

173 #define 
	#IN_CLASSB_HOST
 (0xffffffff & ~
IN_CLASSB_NET
)

	)

174 #define 
	#IN_CLASSB_MAX
 65536

	)

176 #define 
	#IN_CLASSC
(
a
) ((((
in_addr_t
)(a)) & 0xe0000000) == 0xc0000000)

	)

177 #define 
	#IN_CLASSC_NET
 0xffffff00

	)

178 #define 
	#IN_CLASSC_NSHIFT
 8

	)

179 #define 
	#IN_CLASSC_HOST
 (0xffffffff & ~
IN_CLASSC_NET
)

	)

181 #define 
	#IN_CLASSD
(
a
) ((((
in_addr_t
)(a)) & 0xf0000000) == 0xe0000000)

	)

182 #define 
	#IN_MULTICAST
(
a
) 
	`IN_CLASSD
(a)

	)

184 #define 
	#IN_EXPERIMENTAL
(
a
) ((((
in_addr_t
)(a)) & 0xe0000000) == 0xe0000000)

	)

185 #define 
	#IN_BADCLASS
(
a
) ((((
in_addr_t
)(a)) & 0xf0000000) == 0xf0000000)

	)

188 #define 
	#INADDR_ANY
 ((
in_addr_t
) 0x00000000)

	)

190 #define 
	#INADDR_BROADCAST
 ((
in_addr_t
) 0xffffffff)

	)

192 #define 
	#INADDR_NONE
 ((
in_addr_t
) 0xffffffff)

	)

195 #define 
	#IN_LOOPBACKNET
 127

	)

197 #ifndef 
INADDR_LOOPBACK


198 #define 
	#INADDR_LOOPBACK
 ((
in_addr_t
) 0x7f000001)

	)

202 #define 
	#INADDR_UNSPEC_GROUP
 ((
in_addr_t
) 0xe0000000)

	)

203 #define 
	#INADDR_ALLHOSTS_GROUP
 ((
in_addr_t
) 0xe0000001)

	)

204 #define 
	#INADDR_ALLRTRS_GROUP
 ((
in_addr_t
) 0xe0000002)

	)

205 #define 
	#INADDR_MAX_LOCAL_GROUP
 ((
in_addr_t
) 0xe00000ff)

	)

207 #ifndef 
__USE_KERNEL_IPV6_DEFS


209 struct 
	sin6_addr


213 
uint8_t
 
	m__u6_addr8
[16];

214 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


215 
uint16_t
 
	m__u6_addr16
[8];

216 
uint32_t
 
	m__u6_addr32
[4];

218 } 
	m__in6_u
;

219 #define 
	#s6_addr
 
__in6_u
.
__u6_addr8


	)

220 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


221 #define 
	#s6_addr16
 
__in6_u
.
__u6_addr16


	)

222 #define 
	#s6_addr32
 
__in6_u
.
__u6_addr32


	)

227 extern const struct 
in6_addr
 
in6addr_any
;

228 extern const struct 
in6_addr
 
in6addr_loopback
;

229 #define 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 #define 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 #define 
	#INET_ADDRSTRLEN
 16

	)

233 #define 
	#INET6_ADDRSTRLEN
 46

	)

237 struct 
	ssockaddr_in


239 
__SOCKADDR_COMMON
 (
sin_
);

240 
in_port_t
 
	msin_port
;

241 struct 
in_addr
 
	msin_addr
;

244 unsigned char 
	msin_zero
[sizeof (struct 
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246 sizeof (
in_port_t
) -

247 sizeof (struct 
in_addr
)];

250 #ifndef 
__USE_KERNEL_IPV6_DEFS


252 struct 
	ssockaddr_in6


254 
__SOCKADDR_COMMON
 (
sin6_
);

255 
in_port_t
 
	msin6_port
;

256 
uint32_t
 
	msin6_flowinfo
;

257 struct 
in6_addr
 
	msin6_addr
;

258 
uint32_t
 
	msin6_scope_id
;

262 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


264 struct 
	sip_mreq


267 struct 
in_addr
 
	mimr_multiaddr
;

270 struct 
in_addr
 
	mimr_interface
;

273 struct 
	sip_mreq_source


276 struct 
in_addr
 
	mimr_multiaddr
;

279 struct 
in_addr
 
	mimr_interface
;

282 struct 
in_addr
 
	mimr_sourceaddr
;

286 #ifndef 
__USE_KERNEL_IPV6_DEFS


288 struct 
	sipv6_mreq


291 struct 
in6_addr
 
	mipv6mr_multiaddr
;

294 unsigned int 
	mipv6mr_interface
;

298 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


300 struct 
	sgroup_req


303 
uint32_t
 
	mgr_interface
;

306 struct 
sockaddr_storage
 
	mgr_group
;

309 struct 
	sgroup_source_req


312 
uint32_t
 
	mgsr_interface
;

315 struct 
sockaddr_storage
 
	mgsr_group
;

318 struct 
sockaddr_storage
 
	mgsr_source
;

323 struct 
	sip_msfilter


326 struct 
in_addr
 
	mimsf_multiaddr
;

329 struct 
in_addr
 
	mimsf_interface
;

332 
uint32_t
 
	mimsf_fmode
;

335 
uint32_t
 
	mimsf_numsrc
;

337 struct 
in_addr
 
	mimsf_slist
[1];

340 #define 
	#IP_MSFILTER_SIZE
(
numsrc
) (sizeof (struct 
ip_msfilter
) \

341 - sizeof (struct 
in_addr
) \

342 + (
numsrc
) * sizeof (struct 
in_addr
))

	)

344 struct 
	sgroup_filter


347 
uint32_t
 
	mgf_interface
;

350 struct 
sockaddr_storage
 
	mgf_group
;

353 
uint32_t
 
	mgf_fmode
;

356 
uint32_t
 
	mgf_numsrc
;

358 struct 
sockaddr_storage
 
	mgf_slist
[1];

361 #define 
	#GROUP_FILTER_SIZE
(
numsrc
) (sizeof (struct 
group_filter
) \

362 - sizeof (struct 
sockaddr_storage
) \

363 + ((
numsrc
) \

364 * sizeof (struct 
sockaddr_storage
)))

	)

374 extern 
uint32_t
 
	$ntohl
 (
uint32_t
 
__netlong
) 
__THROW
 
	`__attribute__
 ((
__const__
));

375 extern 
uint16_t
 
	$ntohs
 (
uint16_t
 
__netshort
)

376 
__THROW
 
	`__attribute__
 ((
__const__
));

377 extern 
uint32_t
 
	$htonl
 (
uint32_t
 
__hostlong
)

378 
__THROW
 
	`__attribute__
 ((
__const__
));

379 extern 
uint16_t
 
	$htons
 (
uint16_t
 
__hostshort
)

380 
__THROW
 
	`__attribute__
 ((
__const__
));

382 #include 
	~<endian.h
>

385 #include 
	~<bits/byteswap.h
>

387 #ifdef 
__OPTIMIZE__


391 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


394 #define 
	#ntohl
(
x
) (x)

	)

395 #define 
	#ntohs
(
x
) (x)

	)

396 #define 
	#htonl
(
x
) (x)

	)

397 #define 
	#htons
(
x
) (x)

	)

399 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


400 #define 
	#ntohl
(
x
) 
	`__bswap_32
 (x)

	)

401 #define 
	#ntohs
(
x
) 
	`__bswap_16
 (x)

	)

402 #define 
	#htonl
(
x
) 
	`__bswap_32
 (x)

	)

403 #define 
	#htons
(
x
) 
	`__bswap_16
 (x)

	)

408 #ifdef 
__GNUC__


409 #define 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__extension__
 \

411 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] == 0; 
	}
}))

	)

417 #define 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__extension__
 \

419 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] == 
	`htonl
 (1); }))

	)

425 #define 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__extension__
 \

427 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`htonl
 (0xffc00000)) == htonl (0xfe800000); }))

	)

430 #define 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__extension__
 \

432 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`htonl
 (0xffc00000)) == htonl (0xfec00000); }))

	)

435 #define 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__extension__
 \

437 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] == 
	`htonl
 (0xffff); }))

	)

442 #define 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__extension__
 \

444 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`ntohl
 (
__a
->
s6_addr32
[3]) > 1; }))

	)

450 #define 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__extension__
 \

452 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

453 const struct 
in6_addr
 *
__b
 = (const struct in6_addr *) (
b
); \

454 
__a
->
s6_addr32
[0] == 
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] == 
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] == 
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] == 
__b
->s6_addr32[3]; }))

	)

459 #define 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((const 
uint32_t
 *) (
a
))[0] == 0 \

461 && ((const 
uint32_t
 *) (
a
))[1] == 0 \

462 && ((const 
uint32_t
 *) (
a
))[2] == 0 \

463 && ((const 
uint32_t
 *) (
a
))[3] == 0)

	)

465 #define 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((const 
uint32_t
 *) (
a
))[0] == 0 \

467 && ((const 
uint32_t
 *) (
a
))[1] == 0 \

468 && ((const 
uint32_t
 *) (
a
))[2] == 0 \

469 && ((const 
uint32_t
 *) (
a
))[3] == 
	`htonl
 (1))

	)

471 #define 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((const 
uint32_t
 *) (
a
))[0] & 
	`htonl
 (0xffc00000)) \

473 == 
	`htonl
 (0xfe800000))

	)

475 #define 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((const 
uint32_t
 *) (
a
))[0] & 
	`htonl
 (0xffc00000)) \

477 == 
	`htonl
 (0xfec00000))

	)

479 #define 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((const 
uint32_t
 *) (
a
))[0] == 0) \

481 && (((const 
uint32_t
 *) (
a
))[1] == 0) \

482 && (((const 
uint32_t
 *) (
a
))[2] == 
	`htonl
 (0xffff)))

	)

484 #define 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((const 
uint32_t
 *) (
a
))[0] == 0) \

486 && (((const 
uint32_t
 *) (
a
))[1] == 0) \

487 && (((const 
uint32_t
 *) (
a
))[2] == 0) \

488 && (
	`ntohl
 (((const 
uint32_t
 *) (
a
))[3]) > 1))

	)

490 #define 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((const 
uint32_t
 *) (
a
))[0] == ((const uint32_t *) (
b
))[0]) \

492 && (((const 
uint32_t
 *) (
a
))[1] == ((const uint32_t *) (
b
))[1]) \

493 && (((const 
uint32_t
 *) (
a
))[2] == ((const uint32_t *) (
b
))[2]) \

494 && (((const 
uint32_t
 *) (
a
))[3] == ((const uint32_t *) (
b
))[3]))

	)

497 #define 
	#IN6_IS_ADDR_MULTICAST
(
a
) (((const 
uint8_t
 *) (a))[0] == 0xff)

	)

499 #if 
defined
 
__USE_MISC
 || defined 
__USE_GNU


501 extern int 
	$bindresvport
 (int 
__sockfd
, struct 
sockaddr_in
 *
__sock_in
) 
__THROW
;

504 extern int 
	$bindresvport6
 (int 
__sockfd
, struct 
sockaddr_in6
 *
__sock_in
)

505 
__THROW
;

509 #define 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x1))

	)

513 #define 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x2))

	)

517 #define 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x5))

	)

521 #define 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x8))

	)

525 #define 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0xe))

	)

530 #ifdef 
__USE_GNU


531 struct 
cmsghdr
;

534 struct 
	sin6_pktinfo


536 struct 
in6_addr
 
ipi6_addr
;

537 unsigned int 
ipi6_ifindex
;

541 struct 
	sip6_mtuinfo


543 struct 
sockaddr_in6
 
ip6m_addr
;

544 
uint32_t
 
ip6m_mtu
;

549 extern int 
	$inet6_option_space
 (int 
__nbytes
)

550 
__THROW
 
__attribute_deprecated__
;

551 extern int 
	$inet6_option_init
 (void *
__bp
, struct 
cmsghdr
 **
__cmsgp
,

552 int 
__type
) 
__THROW
 
__attribute_deprecated__
;

553 extern int 
	$inet6_option_append
 (struct 
cmsghdr
 *
__cmsg
,

554 const 
uint8_t
 *
__typep
, int 
__multx
,

555 int 
__plusy
) 
__THROW
 
__attribute_deprecated__
;

556 extern 
uint8_t
 *
	$inet6_option_alloc
 (struct 
cmsghdr
 *
__cmsg
, int 
__datalen
,

557 int 
__multx
, int 
__plusy
)

558 
__THROW
 
__attribute_deprecated__
;

559 extern int 
	$inet6_option_next
 (const struct 
cmsghdr
 *
__cmsg
,

560 
uint8_t
 **
__tptrp
)

561 
__THROW
 
__attribute_deprecated__
;

562 extern int 
	$inet6_option_find
 (const struct 
cmsghdr
 *
__cmsg
,

563 
uint8_t
 **
__tptrp
, int 
__type
)

564 
__THROW
 
__attribute_deprecated__
;

568 extern int 
	$inet6_opt_init
 (void *
__extbuf
, 
socklen_t
 
__extlen
) 
__THROW
;

569 extern int 
	$inet6_opt_append
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
,

570 
uint8_t
 
__type
, 
socklen_t
 
__len
, uint8_t 
__align
,

571 void **
__databufp
) 
__THROW
;

572 extern int 
	$inet6_opt_finish
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
)

573 
__THROW
;

574 extern int 
	$inet6_opt_set_val
 (void *
__databuf
, int 
__offset
, void *
__val
,

575 
socklen_t
 
__vallen
) 
__THROW
;

576 extern int 
	$inet6_opt_next
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
,

577 
uint8_t
 *
__typep
, 
socklen_t
 *
__lenp
,

578 void **
__databufp
) 
__THROW
;

579 extern int 
	$inet6_opt_find
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
,

580 
uint8_t
 
__type
, 
socklen_t
 *
__lenp
,

581 void **
__databufp
) 
__THROW
;

582 extern int 
	$inet6_opt_get_val
 (void *
__databuf
, int 
__offset
, void *
__val
,

583 
socklen_t
 
__vallen
) 
__THROW
;

587 extern 
socklen_t
 
	$inet6_rth_space
 (int 
__type
, int 
__segments
) 
__THROW
;

588 extern void *
	$inet6_rth_init
 (void *
__bp
, 
socklen_t
 
__bp_len
, int 
__type
,

589 int 
__segments
) 
__THROW
;

590 extern int 
	$inet6_rth_add
 (void *
__bp
, const struct 
in6_addr
 *
__addr
) 
__THROW
;

591 extern int 
	$inet6_rth_reverse
 (const void *
__in
, void *
__out
) 
__THROW
;

592 extern int 
	$inet6_rth_segments
 (const void *
__bp
) 
__THROW
;

593 extern struct 
in6_addr
 *
	$inet6_rth_getaddr
 (const void *
__bp
, int 
__index
)

594 
__THROW
;

600 extern int 
	$getipv4sourcefilter
 (int 
__s
, struct 
in_addr
 
__interface_addr
,

601 struct 
in_addr
 
__group
, 
uint32_t
 *
__fmode
,

602 
uint32_t
 *
__numsrc
, struct 
in_addr
 *
__slist
)

603 
__THROW
;

606 extern int 
	$setipv4sourcefilter
 (int 
__s
, struct 
in_addr
 
__interface_addr
,

607 struct 
in_addr
 
__group
, 
uint32_t
 
__fmode
,

608 
uint32_t
 
__numsrc
,

609 const struct 
in_addr
 *
__slist
)

610 
__THROW
;

614 extern int 
	$getsourcefilter
 (int 
__s
, 
uint32_t
 
__interface_addr
,

615 const struct 
sockaddr
 *
__group
,

616 
socklen_t
 
__grouplen
, 
uint32_t
 *
__fmode
,

617 
uint32_t
 *
__numsrc
,

618 struct 
sockaddr_storage
 *
__slist
) 
__THROW
;

621 extern int 
	$setsourcefilter
 (int 
__s
, 
uint32_t
 
__interface_addr
,

622 const struct 
sockaddr
 *
__group
,

623 
socklen_t
 
__grouplen
, 
uint32_t
 
__fmode
,

624 
uint32_t
 
__numsrc
,

625 const struct 
sockaddr_storage
 *
__slist
) 
__THROW
;

628 
__END_DECLS


	@/usr/include/stdio.h

23 #ifndef 
_STDIO_H


25 #if !
defined
 
__need_FILE
 && !defined 
__need___FILE


26 #define 
	#_STDIO_H
 1

	)

27 #include 
	~<features.h
>

29 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

35 #include 
	~<bits/types.h
>

36 #define 
	#__need_FILE


	)

37 #define 
	#__need___FILE


	)

41 #if !
defined
 
__FILE_defined
 && defined 
__need_FILE


44 struct 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 typedef struct 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #if 
defined
 
__USE_LARGEFILE64
 || defined 
__USE_SVID
 || defined 
__USE_POSIX
 \

51 || 
defined
 
	g__USE_BSD
 || defined 
	g__USE_ISOC99
 || defined 
	g__USE_XOPEN
 \

52 || 
defined
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 #define 
	#__FILE_defined
 1

	)

58 #undef 
__need_FILE


61 #if !
defined
 
____FILE_defined
 && defined 
__need___FILE


64 typedef struct 
_IO_FILE
 
	t__FILE
;

66 #define 
	#____FILE_defined
 1

	)

68 #undef 
__need___FILE


71 #ifdef 
_STDIO_H


72 #define 
	#_STDIO_USES_IOSTREAM


	)

74 #include 
	~<libio.h
>

76 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


77 #ifdef 
__GNUC__


78 #ifndef 
_VA_LIST_DEFINED


79 typedef 
_G_va_list
 
	tva_list
;

80 #define 
	#_VA_LIST_DEFINED


	)

83 #include 
	~<stdarg.h
>

87 #ifdef 
__USE_XOPEN2K8


88 #ifndef 
__off_t_defined


89 #ifndef 
__USE_FILE_OFFSET64


90 typedef 
__off_t
 
	toff_t
;

92 typedef 
__off64_t
 
	toff_t
;

94 #define 
	#__off_t_defined


	)

96 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


97 typedef 
__off64_t
 
	toff64_t
;

98 #define 
	#__off64_t_defined


	)

101 #ifndef 
__ssize_t_defined


102 typedef 
__ssize_t
 
	tssize_t
;

103 #define 
	#__ssize_t_defined


	)

108 
__BEGIN_NAMESPACE_STD


109 #ifndef 
__USE_FILE_OFFSET64


110 typedef 
_G_fpos_t
 
	tfpos_t
;

112 typedef 
_G_fpos64_t
 
	tfpos_t
;

114 
__END_NAMESPACE_STD


115 #ifdef 
__USE_LARGEFILE64


116 typedef 
_G_fpos64_t
 
	tfpos64_t
;

120 #define 
	#_IOFBF
 0

	)

121 #define 
	#_IOLBF
 1

	)

122 #define 
	#_IONBF
 2

	)

126 #ifndef 
BUFSIZ


127 #define 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #ifndef 
EOF


134 #define 
	#EOF
 (-1)

	)

140 #define 
	#SEEK_SET
 0

	)

141 #define 
	#SEEK_CUR
 1

	)

142 #define 
	#SEEK_END
 2

	)

143 #ifdef 
__USE_GNU


144 #define 
	#SEEK_DATA
 3

	)

145 #define 
	#SEEK_HOLE
 4

	)

149 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


151 #define 
	#P_tmpdir
 "/tmp"

	)

164 #include 
	~<bits/stdio_lim.h
>

168 extern struct 
_IO_FILE
 *
stdin
;

169 extern struct 
_IO_FILE
 *
stdout
;

170 extern struct 
_IO_FILE
 *
stderr
;

172 #define 
	#stdin
 
stdin


	)

173 #define 
	#stdout
 
stdout


	)

174 #define 
	#stderr
 
stderr


	)

176 
__BEGIN_NAMESPACE_STD


178 extern int 
	$remove
 (const char *
__filename
) 
__THROW
;

180 extern int 
	$rename
 (const char *
__old
, const char *
__new
) 
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifdef 
__USE_ATFILE


185 extern int 
	$renameat
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

186 const char *
__new
) 
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #ifndef 
__USE_FILE_OFFSET64


195 extern 
FILE
 *
	$tmpfile
 (void) 
__wur
;

197 #ifdef 
__REDIRECT


198 extern 
FILE
 *
	`__REDIRECT
 (
tmpfile
, (void), 
tmpfile64
) 
__wur
;

200 #define 
	#tmpfile
 
tmpfile64


	)

204 #ifdef 
__USE_LARGEFILE64


205 extern 
FILE
 *
	$tmpfile64
 (void) 
__wur
;

209 extern char *
	$tmpnam
 (char *
__s
) 
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifdef 
__USE_MISC


215 extern char *
	$tmpnam_r
 (char *
__s
) 
__THROW
 
__wur
;

219 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


227 extern char *
	$tempnam
 (const char *
__dir
, const char *
__pfx
)

228 
__THROW
 
__attribute_malloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 extern int 
	`fclose
 (
FILE
 *
__stream
);

242 extern int 
	`fflush
 (
FILE
 *
__stream
);

243 
__END_NAMESPACE_STD


245 #ifdef 
__USE_MISC


252 extern int 
	`fflush_unlocked
 (
FILE
 *
__stream
);

255 #ifdef 
__USE_GNU


262 extern int 
	`fcloseall
 (void);

266 
__BEGIN_NAMESPACE_STD


267 #ifndef 
__USE_FILE_OFFSET64


272 extern 
FILE
 *
	$fopen
 (const char *
__restrict
 
__filename
,

273 const char *
__restrict
 
__modes
) 
__wur
;

278 extern 
FILE
 *
	$freopen
 (const char *
__restrict
 
__filename
,

279 const char *
__restrict
 
__modes
,

280 
FILE
 *
__restrict
 
__stream
) 
__wur
;

282 #ifdef 
__REDIRECT


283 extern 
FILE
 *
	`__REDIRECT
 (
fopen
, (const char *
__restrict
 
__filename
,

284 const char *
__restrict
 
__modes
), 
fopen64
)

285 
__wur
;

286 extern 
FILE
 *
	`__REDIRECT
 (
freopen
, (const char *
__restrict
 
__filename
,

287 const char *
__restrict
 
__modes
,

288 
FILE
 *
__restrict
 
__stream
), 
freopen64
)

289 
__wur
;

291 #define 
	#fopen
 
fopen64


	)

292 #define 
	#freopen
 
freopen64


	)

295 
__END_NAMESPACE_STD


296 #ifdef 
__USE_LARGEFILE64


297 extern 
FILE
 *
	$fopen64
 (const char *
__restrict
 
__filename
,

298 const char *
__restrict
 
__modes
) 
__wur
;

299 extern 
FILE
 *
	$freopen64
 (const char *
__restrict
 
__filename
,

300 const char *
__restrict
 
__modes
,

301 
FILE
 *
__restrict
 
__stream
) 
__wur
;

304 #ifdef 
__USE_POSIX


306 extern 
FILE
 *
	$fdopen
 (int 
__fd
, const char *
__modes
) 
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 extern 
FILE
 *
	$fopencookie
 (void *
__restrict
 
__magic_cookie
,

313 const char *
__restrict
 
__modes
,

314 
_IO_cookie_io_functions_t
 
__io_funcs
) 
__THROW
 
__wur
;

317 #ifdef 
__USE_XOPEN2K8


319 extern 
FILE
 *
	$fmemopen
 (void *
__s
, 
size_t
 
__len
, const char *
__modes
)

320 
__THROW
 
__wur
;

325 extern 
FILE
 *
	$open_memstream
 (char **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 extern void 
	$setbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
) 
__THROW
;

336 extern int 
	$setvbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

337 int 
__modes
, 
size_t
 
__n
) 
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 extern void 
	$setbuffer
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

344 
size_t
 
__size
) 
__THROW
;

347 extern void 
	$setlinebuf
 (
FILE
 *
__stream
) 
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 extern int 
	`fprintf
 (
FILE
 *
__restrict
 
__stream
,

357 const char *
__restrict
 
__format
, ...);

362 extern int 
	`printf
 (const char *
__restrict
 
__format
, ...);

364 extern int 
	$sprintf
 (char *
__restrict
 
__s
,

365 const char *
__restrict
 
__format
, ...) 
__THROWNL
;

371 extern int 
	`vfprintf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

372 
_G_va_list
 
__arg
);

377 extern int 
	`vprintf
 (const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
);

379 extern int 
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__format
,

380 
_G_va_list
 
__arg
) 
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 extern int 
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

387 const char *
__restrict
 
__format
, ...)

388 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

390 extern int 
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

391 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

392 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifdef 
__USE_GNU


399 extern int 
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__f
,

400 
_G_va_list
 
__arg
)

401 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 0))) 
__wur
;

402 extern int 
	$__asprintf
 (char **
__restrict
 
__ptr
,

403 const char *
__restrict
 
__fmt
, ...)

404 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

405 extern int 
	$asprintf
 (char **
__restrict
 
__ptr
,

406 const char *
__restrict
 
__fmt
, ...)

407 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

410 #ifdef 
__USE_XOPEN2K8


412 extern int 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
,

413 
_G_va_list
 
__arg
)

414 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

415 extern int 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

416 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 extern int 
	$fscanf
 (
FILE
 *
__restrict
 
__stream
,

426 const char *
__restrict
 
__format
, ...) 
__wur
;

431 extern int 
	$scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

433 extern int 
	$sscanf
 (const char *
__restrict
 
__s
,

434 const char *
__restrict
 
__format
, ...) 
__THROW
;

436 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

437 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

438 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

439 #ifdef 
__REDIRECT


443 extern int 
	`__REDIRECT
 (
fscanf
, (
FILE
 *
__restrict
 
__stream
,

444 const char *
__restrict
 
__format
, ...),

445 
__isoc99_fscanf
) 
__wur
;

446 extern int 
	`__REDIRECT
 (
scanf
, (const char *
__restrict
 
__format
, ...),

447 
__isoc99_scanf
) 
__wur
;

448 extern int 
	`__REDIRECT_NTH
 (
sscanf
, (const char *
__restrict
 
__s
,

449 const char *
__restrict
 
__format
, ...),

450 
__isoc99_sscanf
);

452 extern int 
	$__isoc99_fscanf
 (
FILE
 *
__restrict
 
__stream
,

453 const char *
__restrict
 
__format
, ...) 
__wur
;

454 extern int 
	$__isoc99_scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

455 extern int 
	$__isoc99_sscanf
 (const char *
__restrict
 
__s
,

456 const char *
__restrict
 
__format
, ...) 
__THROW
;

457 #define 
	#fscanf
 
__isoc99_fscanf


	)

458 #define 
	#scanf
 
__isoc99_scanf


	)

459 #define 
	#sscanf
 
__isoc99_sscanf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 extern int 
	$vfscanf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

472 
_G_va_list
 
__arg
)

473 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

479 extern int 
	$vscanf
 (const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

480 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

483 extern int 
	$vsscanf
 (const char *
__restrict
 
__s
,

484 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

485 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

487 #if !
defined
 
__USE_GNU
 \

488 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

489 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

490 #ifdef 
__REDIRECT


494 extern int 
	`__REDIRECT
 (
vfscanf
,

495 (
FILE
 *
__restrict
 
__s
,

496 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
),

497 
__isoc99_vfscanf
)

498 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

499 extern int 
	`__REDIRECT
 (
vscanf
, (const char *
__restrict
 
__format
,

500 
_G_va_list
 
__arg
), 
__isoc99_vscanf
)

501 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

502 extern int 
	`__REDIRECT_NTH
 (
vsscanf
,

503 (const char *
__restrict
 
__s
,

504 const char *
__restrict
 
__format
,

505 
_G_va_list
 
__arg
), 
__isoc99_vsscanf
)

506 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

508 extern int 
	$__isoc99_vfscanf
 (
FILE
 *
__restrict
 
__s
,

509 const char *
__restrict
 
__format
,

510 
_G_va_list
 
__arg
) 
__wur
;

511 extern int 
	$__isoc99_vscanf
 (const char *
__restrict
 
__format
,

512 
_G_va_list
 
__arg
) 
__wur
;

513 extern int 
	$__isoc99_vsscanf
 (const char *
__restrict
 
__s
,

514 const char *
__restrict
 
__format
,

515 
_G_va_list
 
__arg
) 
__THROW
;

516 #define 
	#vfscanf
 
__isoc99_vfscanf


	)

517 #define 
	#vscanf
 
__isoc99_vscanf


	)

518 #define 
	#vsscanf
 
__isoc99_vsscanf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 extern int 
	`fgetc
 (
FILE
 *
__stream
);

532 extern int 
	`getc
 (
FILE
 *
__stream
);

538 extern int 
	`getchar
 (void);

539 
__END_NAMESPACE_STD


543 #define 
	#getc
(
_fp
) 
	`_IO_getc
 (_fp)

	)

545 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


550 extern int 
	`getc_unlocked
 (
FILE
 *
__stream
);

551 extern int 
	`getchar_unlocked
 (void);

554 #ifdef 
__USE_MISC


561 extern int 
	`fgetc_unlocked
 (
FILE
 *
__stream
);

565 
__BEGIN_NAMESPACE_STD


573 extern int 
	`fputc
 (int 
__c
, 
FILE
 *
__stream
);

574 extern int 
	`putc
 (int 
__c
, 
FILE
 *
__stream
);

580 extern int 
	`putchar
 (int 
__c
);

581 
__END_NAMESPACE_STD


585 #define 
	#putc
(
_ch
, 
_fp
) 
	`_IO_putc
 (_ch, _fp)

	)

587 #ifdef 
__USE_MISC


594 extern int 
	`fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

597 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


602 extern int 
	`putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

603 extern int 
	`putchar_unlocked
 (int 
__c
);

607 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 \

608 || (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

610 extern int 
	`getw
 (
FILE
 *
__stream
);

613 extern int 
	`putw
 (int 
__w
, 
FILE
 *
__stream
);

617 
__BEGIN_NAMESPACE_STD


622 extern char *
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

623 
__wur
;

625 #if !
defined
 
__USE_ISOC11
 \

626 || (
defined
 
__cplusplus
 && __cplusplus <= 201103L)

638 extern char *
	$gets
 (char *
__s
) 
__wur
 
__attribute_deprecated__
;

640 
__END_NAMESPACE_STD


642 #ifdef 
__USE_GNU


649 extern char *
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
,

650 
FILE
 *
__restrict
 
__stream
) 
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 extern 
_IO_ssize_t
 
	$__getdelim
 (char **
__restrict
 
__lineptr
,

666 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

667 
FILE
 *
__restrict
 
__stream
) 
__wur
;

668 extern 
_IO_ssize_t
 
	$getdelim
 (char **
__restrict
 
__lineptr
,

669 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

670 
FILE
 *
__restrict
 
__stream
) 
__wur
;

678 extern 
_IO_ssize_t
 
	$getline
 (char **
__restrict
 
__lineptr
,

679 
size_t
 *
__restrict
 
__n
,

680 
FILE
 *
__restrict
 
__stream
) 
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 extern int 
	`fputs
 (const char *
__restrict
 
__s
, 
FILE
 *__restrict 
__stream
);

695 extern int 
	`puts
 (const char *
__s
);

702 extern int 
	`ungetc
 (int 
__c
, 
FILE
 *
__stream
);

709 extern 
size_t
 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

715 extern 
size_t
 
	`fwrite
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

716 
size_t
 
__n
, 
FILE
 *
__restrict
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifdef 
__USE_GNU


726 extern int 
	`fputs_unlocked
 (const char *
__restrict
 
__s
,

727 
FILE
 *
__restrict
 
__stream
);

730 #ifdef 
__USE_MISC


737 extern 
size_t
 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

739 extern 
size_t
 
	`fwrite_unlocked
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
);

744 
__BEGIN_NAMESPACE_STD


749 extern int 
	`fseek
 (
FILE
 *
__stream
, long int 
__off
, int 
__whence
);

754 extern long int 
	$ftell
 (
FILE
 *
__stream
) 
__wur
;

759 extern void 
	`rewind
 (
FILE
 *
__stream
);

760 
__END_NAMESPACE_STD


767 #if 
defined
 
__USE_LARGEFILE
 || defined 
__USE_XOPEN2K


768 #ifndef 
__USE_FILE_OFFSET64


773 extern int 
	`fseeko
 (
FILE
 *
__stream
, 
__off_t
 
__off
, int 
__whence
);

778 extern 
__off_t
 
	$ftello
 (
FILE
 *
__stream
) 
__wur
;

780 #ifdef 
__REDIRECT


781 extern int 
	`__REDIRECT
 (
fseeko
,

782 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
),

783 
fseeko64
);

784 extern 
__off64_t
 
	`__REDIRECT
 (
ftello
, (
FILE
 *
__stream
), 
ftello64
);

786 #define 
	#fseeko
 
fseeko64


	)

787 #define 
	#ftello
 
ftello64


	)

792 
__BEGIN_NAMESPACE_STD


793 #ifndef 
__USE_FILE_OFFSET64


798 extern int 
	`fgetpos
 (
FILE
 *
__restrict
 
__stream
, 
fpos_t
 *__restrict 
__pos
);

803 extern int 
	`fsetpos
 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
);

805 #ifdef 
__REDIRECT


806 extern int 
	`__REDIRECT
 (
fgetpos
, (
FILE
 *
__restrict
 
__stream
,

807 
fpos_t
 *
__restrict
 
__pos
), 
fgetpos64
);

808 extern int 
	`__REDIRECT
 (
fsetpos
,

809 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
), 
fsetpos64
);

811 #define 
	#fgetpos
 
fgetpos64


	)

812 #define 
	#fsetpos
 
fsetpos64


	)

815 
__END_NAMESPACE_STD


817 #ifdef 
__USE_LARGEFILE64


818 extern int 
	`fseeko64
 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
);

819 extern 
__off64_t
 
	$ftello64
 (
FILE
 *
__stream
) 
__wur
;

820 extern int 
	`fgetpos64
 (
FILE
 *
__restrict
 
__stream
, 
fpos64_t
 *__restrict 
__pos
);

821 extern int 
	`fsetpos64
 (
FILE
 *
__stream
, const 
fpos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 extern void 
	$clearerr
 (
FILE
 *
__stream
) 
__THROW
;

828 extern int 
	$feof
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

830 extern int 
	$ferror
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifdef 
__USE_MISC


835 extern void 
	$clearerr_unlocked
 (
FILE
 *
__stream
) 
__THROW
;

836 extern int 
	$feof_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

837 extern int 
	$ferror_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 extern void 
	`perror
 (const char *
__s
);

847 
__END_NAMESPACE_STD


853 #include 
	~<bits/sys_errlist.h
>

856 #ifdef 
__USE_POSIX


858 extern int 
	$fileno
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

861 #ifdef 
__USE_MISC


863 extern int 
	$fileno_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

867 #if (
defined
 
__USE_POSIX2
 || defined 
__USE_SVID
 || defined 
__USE_BSD
 || \

868 
defined
 
__USE_MISC
)

873 extern 
FILE
 *
	$popen
 (const char *
__command
, const char *
__modes
) 
__wur
;

879 extern int 
	`pclose
 (
FILE
 *
__stream
);

883 #ifdef 
__USE_POSIX


885 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

889 #ifdef 
__USE_XOPEN


891 extern char *
	`cuserid
 (char *
__s
);

895 #ifdef 
__USE_GNU


896 struct 
obstack
;

899 extern int 
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

900 const char *
__restrict
 
__format
, ...)

901 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

902 extern int 
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

903 const char *
__restrict
 
__format
,

904 
_G_va_list
 
__args
)

905 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

909 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


913 extern void 
	$flockfile
 (
FILE
 *
__stream
) 
__THROW
;

917 extern int 
	$ftrylockfile
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

920 extern void 
	$funlockfile
 (
FILE
 *
__stream
) 
__THROW
;

923 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
 && !defined 
__USE_GNU


927 #define 
	#__need_getopt


	)

928 #include 
	~<getopt.h
>

933 #ifdef 
__USE_EXTERN_INLINES


934 #include 
	~<bits/stdio.h
>

936 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__extern_always_inline


937 #include 
	~<bits/stdio2.h
>

939 #ifdef 
__LDBL_COMPAT


940 #include 
	~<bits/stdio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #ifndef 
_STDLIB_H


24 #include 
	~<features.h
>

27 #define 
	#__need_size_t


	)

28 #ifndef 
__need_malloc_and_calloc


29 #define 
	#__need_wchar_t


	)

30 #define 
	#__need_NULL


	)

32 #include 
	~<stddef.h
>

34 
	g__BEGIN_DECLS


36 #ifndef 
__need_malloc_and_calloc


37 #define 
	#_STDLIB_H
 1

	)

39 #if (
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8
) && !defined 
_SYS_WAIT_H


41 #include 
	~<bits/waitflags.h
>

42 #include 
	~<bits/waitstatus.h
>

44 #ifdef 
__USE_BSD


49 #if 
defined
 
__GNUC__
 && !defined 
__cplusplus


50 #define 
	#__WAIT_INT
(
status
) \

51 (
	`__extension__
 (((union { 
	`__typeof
(
status
) 
__in
; int 
__i
; }) \

52 { .
__in
 = (
status
) }).
__i
))

	)

54 #define 
	#__WAIT_INT
(
status
) (*(int *) &(status))

	)

62 #if !
defined
 
__GNUC__
 || __GNUC__ < 2 || defined 
__cplusplus


63 #define 
	#__WAIT_STATUS
 void *

	)

64 #define 
	#__WAIT_STATUS_DEFN
 void *

	)

69 union 
wait
 *
	m__uptr
;

70 int *
	m__iptr
;

71 } 
	t__WAIT_STATUS
 
	t__attribute__
 ((
	t__transparent_union__
));

72 #define 
	#__WAIT_STATUS_DEFN
 int *

	)

77 #define 
	#__WAIT_INT
(
status
) (status)

	)

78 #define 
	#__WAIT_STATUS
 int *

	)

79 #define 
	#__WAIT_STATUS_DEFN
 int *

	)

84 #define 
	#WEXITSTATUS
(
status
) 
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (status))

	)

85 #define 
	#WTERMSIG
(
status
) 
	`__WTERMSIG
 (
	`__WAIT_INT
 (status))

	)

86 #define 
	#WSTOPSIG
(
status
) 
	`__WSTOPSIG
 (
	`__WAIT_INT
 (status))

	)

87 #define 
	#WIFEXITED
(
status
) 
	`__WIFEXITED
 (
	`__WAIT_INT
 (status))

	)

88 #define 
	#WIFSIGNALED
(
status
) 
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (status))

	)

89 #define 
	#WIFSTOPPED
(
status
) 
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (status))

	)

90 #ifdef 
__WIFCONTINUED


91 #define 
	#WIFCONTINUED
(
status
) 
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (status))

	)

95 
__BEGIN_NAMESPACE_STD


99 int 
	mquot
;

100 int 
	mrem
;

101 } 
	tdiv_t
;

104 #ifndef 
__ldiv_t_defined


107 long int 
	mquot
;

108 long int 
	mrem
;

109 } 
	tldiv_t
;

110 #define 
	#__ldiv_t_defined
 1

	)

112 
	g__END_NAMESPACE_STD


114 #if 
defined
 
__USE_ISOC99
 && !defined 
__lldiv_t_defined


115 
__BEGIN_NAMESPACE_C99


117 
__extension__
 typedef struct

119 long long int 
	mquot
;

120 long long int 
	mrem
;

121 } 
	tlldiv_t
;

122 #define 
	#__lldiv_t_defined
 1

	)

123 
	g__END_NAMESPACE_C99


128 #define 
	#RAND_MAX
 2147483647

	)

133 #define 
	#EXIT_FAILURE
 1

	)

134 #define 
	#EXIT_SUCCESS
 0

	)

138 #define 
	#MB_CUR_MAX
 (
	`__ctype_get_mb_cur_max
 ())

	)

139 extern 
size_t
 
	$__ctype_get_mb_cur_max
 (void) 
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 extern double 
	$atof
 (const char *
__nptr
)

145 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

147 extern int 
	$atoi
 (const char *
__nptr
)

148 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

150 extern long int 
	$atol
 (const char *
__nptr
)

151 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

152 
__END_NAMESPACE_STD


154 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__extension__
 extern long long int 
	$atoll
 (const char *
__nptr
)

158 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 extern double 
	$strtod
 (const char *
__restrict
 
__nptr
,

165 char **
__restrict
 
__endptr
)

166 
__THROW
 
	`__nonnull
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 extern float 
	$strtof
 (const char *
__restrict
 
__nptr
,

173 char **
__restrict
 
__endptr
) 
__THROW
 
	`__nonnull
 ((1));

175 extern long double 
	$strtold
 (const char *
__restrict
 
__nptr
,

176 char **
__restrict
 
__endptr
)

177 
__THROW
 
	`__nonnull
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 extern long int 
	$strtol
 (const char *
__restrict
 
__nptr
,

184 char **
__restrict
 
__endptr
, int 
__base
)

185 
__THROW
 
	`__nonnull
 ((1));

187 extern unsigned long int 
	$strtoul
 (const char *
__restrict
 
__nptr
,

188 char **
__restrict
 
__endptr
, int 
__base
)

189 
__THROW
 
	`__nonnull
 ((1));

190 
__END_NAMESPACE_STD


192 #ifdef 
__USE_BSD


194 
__extension__


195 extern long long int 
	$strtoq
 (const char *
__restrict
 
__nptr
,

196 char **
__restrict
 
__endptr
, int 
__base
)

197 
__THROW
 
	`__nonnull
 ((1));

199 
__extension__


200 extern unsigned long long int 
	$strtouq
 (const char *
__restrict
 
__nptr
,

201 char **
__restrict
 
__endptr
, int 
__base
)

202 
__THROW
 
	`__nonnull
 ((1));

205 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__extension__


209 extern long long int 
	$strtoll
 (const char *
__restrict
 
__nptr
,

210 char **
__restrict
 
__endptr
, int 
__base
)

211 
__THROW
 
	`__nonnull
 ((1));

213 
__extension__


214 extern unsigned long long int 
	$strtoull
 (const char *
__restrict
 
__nptr
,

215 char **
__restrict
 
__endptr
, int 
__base
)

216 
__THROW
 
	`__nonnull
 ((1));

217 
__END_NAMESPACE_C99


221 #ifdef 
__USE_GNU


235 #include 
	~<xlocale.h
>

239 extern long int 
	$strtol_l
 (const char *
__restrict
 
__nptr
,

240 char **
__restrict
 
__endptr
, int 
__base
,

241 
__locale_t
 
__loc
) 
__THROW
 
	`__nonnull
 ((1, 4));

243 extern unsigned long int 
	$strtoul_l
 (const char *
__restrict
 
__nptr
,

244 char **
__restrict
 
__endptr
,

245 int 
__base
, 
__locale_t
 
__loc
)

246 
__THROW
 
	`__nonnull
 ((1, 4));

248 
__extension__


249 extern long long int 
	$strtoll_l
 (const char *
__restrict
 
__nptr
,

250 char **
__restrict
 
__endptr
, int 
__base
,

251 
__locale_t
 
__loc
)

252 
__THROW
 
	`__nonnull
 ((1, 4));

254 
__extension__


255 extern unsigned long long int 
	$strtoull_l
 (const char *
__restrict
 
__nptr
,

256 char **
__restrict
 
__endptr
,

257 int 
__base
, 
__locale_t
 
__loc
)

258 
__THROW
 
	`__nonnull
 ((1, 4));

260 extern double 
	$strtod_l
 (const char *
__restrict
 
__nptr
,

261 char **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

262 
__THROW
 
	`__nonnull
 ((1, 3));

264 extern float 
	$strtof_l
 (const char *
__restrict
 
__nptr
,

265 char **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

266 
__THROW
 
	`__nonnull
 ((1, 3));

268 extern long double 
	$strtold_l
 (const char *
__restrict
 
__nptr
,

269 char **
__restrict
 
__endptr
,

270 
__locale_t
 
__loc
)

271 
__THROW
 
	`__nonnull
 ((1, 3));

275 #ifdef 
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__extern_inline
 int

278 
	`__NTH
 (
	$atoi
 (const char *
__nptr
))

280 return (int) 
	`strtol
 (
__nptr
, (char **) 
NULL
, 10);

281 
	}
}

282 
__extern_inline
 long int

283 
__NTH
 (
	$atol
 (const char *
__nptr
))

285 return 
	`strtol
 (
__nptr
, (char **) 
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #if 
defined
 
__USE_MISC
 || defined 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__extension__
 
__extern_inline
 long long int

292 
__NTH
 (
	$atoll
 (const char *
__nptr
))

294 return 
	`strtoll
 (
__nptr
, (char **) 
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN_EXTENDED


305 extern char *
	$l64a
 (long int 
__n
) 
__THROW
 
__wur
;

308 extern long int 
	$a64l
 (const char *
__s
)

309 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

313 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_BSD


314 #include 
	~<sys/types.h
>

321 extern long int 
	$random
 (void) 
__THROW
;

324 extern void 
	$srandom
 (unsigned int 
__seed
) 
__THROW
;

330 extern char *
	$initstate
 (unsigned int 
__seed
, char *
__statebuf
,

331 
size_t
 
__statelen
) 
__THROW
 
	`__nonnull
 ((2));

335 extern char *
	$setstate
 (char *
__statebuf
) 
__THROW
 
	`__nonnull
 ((1));

338 #ifdef 
__USE_MISC


343 struct 
	srandom_data


345 
int32_t
 *
fptr
;

346 
int32_t
 *
rptr
;

347 
int32_t
 *
state
;

348 int 
rand_type
;

349 int 
rand_deg
;

350 int 
rand_sep
;

351 
int32_t
 *
end_ptr
;

354 extern int 
	$random_r
 (struct 
random_data
 *
__restrict
 
__buf
,

355 
int32_t
 *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

357 extern int 
	$srandom_r
 (unsigned int 
__seed
, struct 
random_data
 *
__buf
)

358 
__THROW
 
	`__nonnull
 ((2));

360 extern int 
	$initstate_r
 (unsigned int 
__seed
, char *
__restrict
 
__statebuf
,

361 
size_t
 
__statelen
,

362 struct 
random_data
 *
__restrict
 
__buf
)

363 
__THROW
 
	`__nonnull
 ((2, 4));

365 extern int 
	$setstate_r
 (char *
__restrict
 
__statebuf
,

366 struct 
random_data
 *
__restrict
 
__buf
)

367 
__THROW
 
	`__nonnull
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 extern int 
	$rand
 (void) 
__THROW
;

376 extern void 
	$srand
 (unsigned int 
__seed
) 
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifdef 
__USE_POSIX


381 extern int 
	$rand_r
 (unsigned int *
__seed
) 
__THROW
;

385 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


389 extern double 
	$drand48
 (void) 
__THROW
;

390 extern double 
	$erand48
 (unsigned short int 
__xsubi
[3]) 
__THROW
 
	`__nonnull
 ((1));

393 extern long int 
	$lrand48
 (void) 
__THROW
;

394 extern long int 
	$nrand48
 (unsigned short int 
__xsubi
[3])

395 
__THROW
 
	`__nonnull
 ((1));

398 extern long int 
	$mrand48
 (void) 
__THROW
;

399 extern long int 
	$jrand48
 (unsigned short int 
__xsubi
[3])

400 
__THROW
 
	`__nonnull
 ((1));

403 extern void 
	$srand48
 (long int 
__seedval
) 
__THROW
;

404 extern unsigned short int *
	$seed48
 (unsigned short int 
__seed16v
[3])

405 
__THROW
 
	`__nonnull
 ((1));

406 extern void 
	$lcong48
 (unsigned short int 
__param
[7]) 
__THROW
 
	`__nonnull
 ((1));

408 #ifdef 
__USE_MISC


412 struct 
	sdrand48_data


414 unsigned short int 
__x
[3];

415 unsigned short int 
__old_x
[3];

416 unsigned short int 
__c
;

417 unsigned short int 
__init
;

418 
__extension__
 unsigned long long int 
__a
;

423 extern int 
	$drand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

424 double *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

425 extern int 
	$erand48_r
 (unsigned short int 
__xsubi
[3],

426 struct 
drand48_data
 *
__restrict
 
__buffer
,

427 double *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

430 extern int 
	$lrand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

431 long int *
__restrict
 
__result
)

432 
__THROW
 
	`__nonnull
 ((1, 2));

433 extern int 
	$nrand48_r
 (unsigned short int 
__xsubi
[3],

434 struct 
drand48_data
 *
__restrict
 
__buffer
,

435 long int *
__restrict
 
__result
)

436 
__THROW
 
	`__nonnull
 ((1, 2));

439 extern int 
	$mrand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

440 long int *
__restrict
 
__result
)

441 
__THROW
 
	`__nonnull
 ((1, 2));

442 extern int 
	$jrand48_r
 (unsigned short int 
__xsubi
[3],

443 struct 
drand48_data
 *
__restrict
 
__buffer
,

444 long int *
__restrict
 
__result
)

445 
__THROW
 
	`__nonnull
 ((1, 2));

448 extern int 
	$srand48_r
 (long int 
__seedval
, struct 
drand48_data
 *
__buffer
)

449 
__THROW
 
	`__nonnull
 ((2));

451 extern int 
	$seed48_r
 (unsigned short int 
__seed16v
[3],

452 struct 
drand48_data
 *
__buffer
) 
__THROW
 
	`__nonnull
 ((1, 2));

454 extern int 
	$lcong48_r
 (unsigned short int 
__param
[7],

455 struct 
drand48_data
 *
__buffer
)

456 
__THROW
 
	`__nonnull
 ((1, 2));

462 #ifndef 
__malloc_and_calloc_defined


463 #define 
	#__malloc_and_calloc_defined


	)

464 
__BEGIN_NAMESPACE_STD


466 extern void *
	$malloc
 (
size_t
 
__size
) 
__THROW
 
__attribute_malloc__
 
__wur
;

468 extern void *
	$calloc
 (
size_t
 
__nmemb
, size_t 
__size
)

469 
__THROW
 
__attribute_malloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #ifndef 
__need_malloc_and_calloc


474 
__BEGIN_NAMESPACE_STD


480 extern void *
	$realloc
 (void *
__ptr
, 
size_t
 
__size
)

481 
__THROW
 
__attribute_warn_unused_result__
;

483 extern void 
	$free
 (void *
__ptr
) 
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 extern void 
	$cfree
 (void *
__ptr
) 
__THROW
;

491 #if 
defined
 
__USE_GNU
 || defined 
__USE_BSD
 || defined 
__USE_MISC


492 #include 
	~<alloca.h
>

495 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K
) \

496 || 
defined
 
__USE_BSD


498 extern void *
	$valloc
 (
size_t
 
__size
) 
__THROW
 
__attribute_malloc__
 
__wur
;

501 #ifdef 
__USE_XOPEN2K


503 extern int 
	$posix_memalign
 (void **
__memptr
, 
size_t
 
__alignment
, size_t 
__size
)

504 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

507 #ifdef 
__USE_ISOC11


509 extern void *
	$aligned_alloc
 (
size_t
 
__alignment
, size_t 
__size
)

510 
__THROW
 
__attribute_malloc__
 
	`__attribute_alloc_size__
 ((2)) 
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 extern void 
	$abort
 (void) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

519 extern int 
	`atexit
 (void (*
__func
) (void)) 
__THROW
 
	`__nonnull
 ((1));

521 #if 
defined
 
__USE_ISOC11
 || defined 
__USE_ISOCXX11


523 #ifdef 
__cplusplus


524 extern "C++" int 
	`at_quick_exit
 (void (*
__func
) (void))

525 
__THROW
 
	`__asm
 ("at_quick_exit") 
	`__nonnull
 ((1));

527 extern int 
	`at_quick_exit
 (void (*
__func
) (void)) 
__THROW
 
	`__nonnull
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 extern int 
	`on_exit
 (void (*
__func
) (int 
__status
, void *
__arg
), void *__arg)

536 
__THROW
 
	`__nonnull
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 extern void 
	$exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

545 #if 
defined
 
__USE_ISOC11
 || defined 
__USE_ISOCXX11


549 extern void 
	$quick_exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

551 
__END_NAMESPACE_STD


553 #ifdef 
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 extern void 
	$_Exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 extern char *
	$getenv
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

565 
__END_NAMESPACE_STD


567 #ifdef 
__USE_GNU


570 extern char *
	$secure_getenv
 (const char *
__name
)

571 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

574 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


578 extern int 
	$putenv
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

581 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K


584 extern int 
	$setenv
 (const char *
__name
, const char *
__value
, int 
__replace
)

585 
__THROW
 
	`__nonnull
 ((2));

588 extern int 
	$unsetenv
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

591 #ifdef 
__USE_MISC


595 extern int 
	$clearenv
 (void) 
__THROW
;

599 #if 
defined
 
__USE_MISC
 \

600 || (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
)

606 extern char *
	$mktemp
 (char *
__template
) 
__THROW
 
	`__nonnull
 ((1));

609 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
 \

610 || 
defined
 
__USE_XOPEN2K8


619 #ifndef 
__USE_FILE_OFFSET64


620 extern int 
	$mkstemp
 (char *
__template
) 
	`__nonnull
 ((1)) 
__wur
;

622 #ifdef 
__REDIRECT


623 extern int 
	`__REDIRECT
 (
mkstemp
, (char *
__template
), 
mkstemp64
)

624 
	`__nonnull
 ((1)) 
__wur
;

626 #define 
	#mkstemp
 
mkstemp64


	)

629 #ifdef 
__USE_LARGEFILE64


630 extern int 
	$mkstemp64
 (char *
__template
) 
	`__nonnull
 ((1)) 
__wur
;

634 #ifdef 
__USE_MISC


641 #ifndef 
__USE_FILE_OFFSET64


642 extern int 
	$mkstemps
 (char *
__template
, int 
__suffixlen
) 
	`__nonnull
 ((1)) 
__wur
;

644 #ifdef 
__REDIRECT


645 extern int 
	`__REDIRECT
 (
mkstemps
, (char *
__template
, int 
__suffixlen
),

646 
mkstemps64
) 
	`__nonnull
 ((1)) 
__wur
;

648 #define 
	#mkstemps
 
mkstemps64


	)

651 #ifdef 
__USE_LARGEFILE64


652 extern int 
	$mkstemps64
 (char *
__template
, int 
__suffixlen
)

653 
	`__nonnull
 ((1)) 
__wur
;

657 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K8


663 extern char *
	$mkdtemp
 (char *
__template
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

666 #ifdef 
__USE_GNU


673 #ifndef 
__USE_FILE_OFFSET64


674 extern int 
	$mkostemp
 (char *
__template
, int 
__flags
) 
	`__nonnull
 ((1)) 
__wur
;

676 #ifdef 
__REDIRECT


677 extern int 
	`__REDIRECT
 (
mkostemp
, (char *
__template
, int 
__flags
), 
mkostemp64
)

678 
	`__nonnull
 ((1)) 
__wur
;

680 #define 
	#mkostemp
 
mkostemp64


	)

683 #ifdef 
__USE_LARGEFILE64


684 extern int 
	$mkostemp64
 (char *
__template
, int 
__flags
) 
	`__nonnull
 ((1)) 
__wur
;

693 #ifndef 
__USE_FILE_OFFSET64


694 extern int 
	$mkostemps
 (char *
__template
, int 
__suffixlen
, int 
__flags
)

695 
	`__nonnull
 ((1)) 
__wur
;

697 #ifdef 
__REDIRECT


698 extern int 
	`__REDIRECT
 (
mkostemps
, (char *
__template
, int 
__suffixlen
,

699 int 
__flags
), 
mkostemps64
)

700 
	`__nonnull
 ((1)) 
__wur
;

702 #define 
	#mkostemps
 
mkostemps64


	)

705 #ifdef 
__USE_LARGEFILE64


706 extern int 
	$mkostemps64
 (char *
__template
, int 
__suffixlen
, int 
__flags
)

707 
	`__nonnull
 ((1)) 
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 extern int 
	$system
 (const char *
__command
) 
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 extern char *
	$canonicalize_file_name
 (const char *
__name
)

725 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

728 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


734 extern char *
	$realpath
 (const char *
__restrict
 
__name
,

735 char *
__restrict
 
__resolved
) 
__THROW
 
__wur
;

740 #ifndef 
__COMPAR_FN_T


741 #define 
	#__COMPAR_FN_T


	)

742 typedef int (*
	t__compar_fn_t
) (const void *, const void *);

744 #ifdef 
__USE_GNU


745 typedef 
__compar_fn_t
 
	tcomparison_fn_t
;

748 #ifdef 
__USE_GNU


749 typedef int (*
	t__compar_d_fn_t
) (const void *, const void *, void *);

752 
__BEGIN_NAMESPACE_STD


755 extern void *
	$bsearch
 (const void *
__key
, const void *
__base
,

756 
size_t
 
__nmemb
, size_t 
__size
, 
__compar_fn_t
 
__compar
)

757 
	`__nonnull
 ((1, 2, 5)) 
__wur
;

759 #ifdef 
__USE_EXTERN_INLINES


760 #include 
	~<bits/stdlib-bsearch.h
>

765 extern void 
	$qsort
 (void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

766 
__compar_fn_t
 
__compar
) 
	`__nonnull
 ((1, 4));

767 #ifdef 
__USE_GNU


768 extern void 
	$qsort_r
 (void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

769 
__compar_d_fn_t
 
__compar
, void *
__arg
)

770 
	`__nonnull
 ((1, 4));

775 extern int 
	$abs
 (int 
__x
) 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

776 extern long int 
	$labs
 (long int 
__x
) 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

777 
__END_NAMESPACE_STD


779 #ifdef 
__USE_ISOC99


780 
__extension__
 extern long long int 
	$llabs
 (long long int 
__x
)

781 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 extern 
div_t
 
	$div
 (int 
__numer
, int 
__denom
)

790 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

791 extern 
ldiv_t
 
	$ldiv
 (long int 
__numer
, long int 
__denom
)

792 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

793 
__END_NAMESPACE_STD


795 #ifdef 
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__extension__
 extern 
lldiv_t
 
	$lldiv
 (long long int 
__numer
,

798 long long int 
__denom
)

799 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

800 
__END_NAMESPACE_C99


804 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

805 || 
defined
 
__USE_SVID


812 extern char *
	$ecvt
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

813 int *
__restrict
 
__sign
) 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

818 extern char *
	$fcvt
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

819 int *
__restrict
 
__sign
) 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

824 extern char *
	$gcvt
 (double 
__value
, int 
__ndigit
, char *
__buf
)

825 
__THROW
 
	`__nonnull
 ((3)) 
__wur
;

828 #ifdef 
__USE_MISC


830 extern char *
	$qecvt
 (long double 
__value
, int 
__ndigit
,

831 int *
__restrict
 
__decpt
, int *__restrict 
__sign
)

832 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

833 extern char *
	$qfcvt
 (long double 
__value
, int 
__ndigit
,

834 int *
__restrict
 
__decpt
, int *__restrict 
__sign
)

835 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

836 extern char *
	$qgcvt
 (long double 
__value
, int 
__ndigit
, char *
__buf
)

837 
__THROW
 
	`__nonnull
 ((3)) 
__wur
;

842 extern int 
	$ecvt_r
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

843 int *
__restrict
 
__sign
, char *__restrict 
__buf
,

844 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((3, 4, 5));

845 extern int 
	$fcvt_r
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

846 int *
__restrict
 
__sign
, char *__restrict 
__buf
,

847 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((3, 4, 5));

849 extern int 
	$qecvt_r
 (long double 
__value
, int 
__ndigit
,

850 int *
__restrict
 
__decpt
, int *__restrict 
__sign
,

851 char *
__restrict
 
__buf
, 
size_t
 
__len
)

852 
__THROW
 
	`__nonnull
 ((3, 4, 5));

853 extern int 
	$qfcvt_r
 (long double 
__value
, int 
__ndigit
,

854 int *
__restrict
 
__decpt
, int *__restrict 
__sign
,

855 char *
__restrict
 
__buf
, 
size_t
 
__len
)

856 
__THROW
 
	`__nonnull
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 extern int 
	$mblen
 (const char *
__s
, 
size_t
 
__n
) 
__THROW
;

866 extern int 
	$mbtowc
 (
wchar_t
 *
__restrict
 
__pwc
,

867 const char *
__restrict
 
__s
, 
size_t
 
__n
) 
__THROW
;

870 extern int 
	$wctomb
 (char *
__s
, 
wchar_t
 
__wchar
) 
__THROW
;

874 extern 
size_t
 
	$mbstowcs
 (
wchar_t
 *
__restrict
 
__pwcs
,

875 const char *
__restrict
 
__s
, 
size_t
 
__n
) 
__THROW
;

877 extern 
size_t
 
	$wcstombs
 (char *
__restrict
 
__s
,

878 const 
wchar_t
 *
__restrict
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifdef 
__USE_SVID


888 extern int 
	$rpmatch
 (const char *
__response
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

892 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


899 extern int 
	$getsubopt
 (char **
__restrict
 
__optionp
,

900 char *const *
__restrict
 
__tokens
,

901 char **
__restrict
 
__valuep
)

902 
__THROW
 
	`__nonnull
 ((1, 2, 3)) 
__wur
;

906 #ifdef 
__USE_XOPEN


908 extern void 
	$setkey
 (const char *
__key
) 
__THROW
 
	`__nonnull
 ((1));

914 #ifdef 
__USE_XOPEN2KXSI


916 extern int 
	$posix_openpt
 (int 
__oflag
) 
__wur
;

919 #ifdef 
__USE_XOPEN


924 extern int 
	$grantpt
 (int 
__fd
) 
__THROW
;

928 extern int 
	$unlockpt
 (int 
__fd
) 
__THROW
;

933 extern char *
	$ptsname
 (int 
__fd
) 
__THROW
 
__wur
;

936 #ifdef 
__USE_GNU


940 extern int 
	$ptsname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
)

941 
__THROW
 
	`__nonnull
 ((2));

944 extern int 
	`getpt
 (void);

947 #ifdef 
__USE_BSD


951 extern int 
	$getloadavg
 (double 
__loadavg
[], int 
__nelem
)

952 
__THROW
 
	`__nonnull
 ((1));

955 #include 
	~<bits/stdlib-float.h
>

958 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


959 #include 
	~<bits/stdlib.h
>

961 #ifdef 
__LDBL_COMPAT


962 #include 
	~<bits/stdlib-ldbl.h
>

966 #undef 
__need_malloc_and_calloc


968 
__END_DECLS


	@/usr/include/string.h

22 #ifndef 
_STRING_H


23 #define 
	#_STRING_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


30 #define 
	#__need_size_t


	)

31 #define 
	#__need_NULL


	)

32 #include 
	~<stddef.h
>

39 #if 
defined
 
__cplusplus
 && (__cplusplus >= 199711L || 
__GNUC_PREREQ
 (4, 4))

40 #define 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 extern void *
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

47 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

50 extern void *
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

51 
__THROW
 
	`__nonnull
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN


58 extern void *
	$memccpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

59 int 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__nonnull
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 extern void *
	$memset
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

69 extern int 
	$memcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

73 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


76 extern void *
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

78 extern const void *
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

81 #ifdef 
__OPTIMIZE__


82 
__extern_always_inline
 void *

83 
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


85 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

88 
__extern_always_inline
 const void *

89 
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


91 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 extern void *
	$memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

99 
__END_NAMESPACE_STD


101 #ifdef 
__USE_GNU


104 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


105 extern "C++" void *
	$rawmemchr
 (void *
__s
, int 
__c
)

106 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

107 extern "C++" const void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

108 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

110 extern void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

111 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

115 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


116 extern "C++" void *
	$memrchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

118 extern "C++" const void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

121 extern void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 extern char *
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

130 
__THROW
 
	`__nonnull
 ((1, 2));

132 extern char *
	$strncpy
 (char *
__restrict
 
__dest
,

133 const char *
__restrict
 
__src
, 
size_t
 
__n
)

134 
__THROW
 
	`__nonnull
 ((1, 2));

137 extern char *
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

138 
__THROW
 
	`__nonnull
 ((1, 2));

140 extern char *
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

141 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

144 extern int 
	$strcmp
 (const char *
__s1
, const char *
__s2
)

145 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

147 extern int 
	$strncmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

151 extern int 
	$strcoll
 (const char *
__s1
, const char *
__s2
)

152 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

154 extern 
size_t
 
	$strxfrm
 (char *
__restrict
 
__dest
,

155 const char *
__restrict
 
__src
, 
size_t
 
__n
)

156 
__THROW
 
	`__nonnull
 ((2));

157 
__END_NAMESPACE_STD


159 #ifdef 
__USE_XOPEN2K8


163 #include 
	~<xlocale.h
>

166 extern int 
	$strcoll_l
 (const char *
__s1
, const char *
__s2
, 
__locale_t
 
__l
)

167 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

169 extern 
size_t
 
	$strxfrm_l
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

170 
__locale_t
 
__l
) 
__THROW
 
	`__nonnull
 ((2, 4));

173 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 \

174 || 
defined
 
__USE_XOPEN2K8


176 extern char *
	$strdup
 (const char *
__s
)

177 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

183 #if 
defined
 
__USE_XOPEN2K8


184 extern char *
	$strndup
 (const char *
__string
, 
size_t
 
__n
)

185 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

188 #if 
defined
 
__USE_GNU
 && defined 
__GNUC__


190 #define 
	#strdupa
(
s
) \

191 (
__extension__
 \

193 const char *
__old
 = (
s
); \

194 
size_t
 
__len
 = 
	`strlen
 (
__old
) + 1; \

195 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
); \

196 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

197 
	}
}))

	)

200 #define 
	#strndupa
(
s
, 
n
) \

201 (
__extension__
 \

203 const char *
__old
 = (
s
); \

204 
size_t
 
__len
 = 
	`strnlen
 (
__old
, (
n
)); \

205 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
 + 1); \

206 
__new
[
__len
] = '\0'; \

207 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


216 extern char *
strchr
 (char *
__s
, int 
__c
)

217 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

218 extern const char *
strchr
 (const char *
__s
, int 
__c
)

219 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

221 #ifdef 
__OPTIMIZE__


222 
__extern_always_inline
 char *

223 
strchr
 (char *
__s
, int 
__c
) 
	g__THROW


225 return 
__builtin_strchr
 (
__s
, 
__c
);

228 
__extern_always_inline
 const char *

229 
strchr
 (const char *
__s
, int 
__c
) 
	g__THROW


231 return 
__builtin_strchr
 (
__s
, 
__c
);

236 extern char *
	$strchr
 (const char *
__s
, int 
__c
)

237 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

240 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


243 extern char *
	`strrchr
 (char *
__s
, int 
__c
)

244 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

245 extern const char *
	`strrchr
 (const char *
__s
, int 
__c
)

246 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

248 #ifdef 
__OPTIMIZE__


249 
__extern_always_inline
 char *

250 
	`strrchr
 (char *
__s
, int 
__c
) 
__THROW


252 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

255 
__extern_always_inline
 const char *

256 
	`strrchr
 (const char *
__s
, int 
__c
) 
__THROW


258 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

261 
	}
}

263 extern char *
	$strrchr
 (const char *
__s
, int 
__c
)

264 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

266 
__END_NAMESPACE_STD


268 #ifdef 
__USE_GNU


271 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


272 extern "C++" char *
	$strchrnul
 (char *
__s
, int 
__c
)

273 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

274 extern "C++" const char *
	$strchrnul
 (const char *
__s
, int 
__c
)

275 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

277 extern char *
	$strchrnul
 (const char *
__s
, int 
__c
)

278 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 extern 
size_t
 
	$strcspn
 (const char *
__s
, const char *
__reject
)

286 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

289 extern 
size_t
 
	$strspn
 (const char *
__s
, const char *
__accept
)

290 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

292 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


295 extern char *
	`strpbrk
 (char *
__s
, const char *
__accept
)

296 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

297 extern const char *
	`strpbrk
 (const char *
__s
, const char *
__accept
)

298 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

300 #ifdef 
__OPTIMIZE__


301 
__extern_always_inline
 char *

302 
	`strpbrk
 (char *
__s
, const char *
__accept
) 
__THROW


304 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

307 
__extern_always_inline
 const char *

308 
	`strpbrk
 (const char *
__s
, const char *
__accept
) 
__THROW


310 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

313 
	}
}

315 extern char *
	$strpbrk
 (const char *
__s
, const char *
__accept
)

316 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

319 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


322 extern char *
	`strstr
 (char *
__haystack
, const char *
__needle
)

323 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

324 extern const char *
	`strstr
 (const char *
__haystack
, const char *
__needle
)

325 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

327 #ifdef 
__OPTIMIZE__


328 
__extern_always_inline
 char *

329 
	`strstr
 (char *
__haystack
, const char *
__needle
) 
__THROW


331 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

334 
__extern_always_inline
 const char *

335 
	`strstr
 (const char *
__haystack
, const char *
__needle
) 
__THROW


337 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

340 
	}
}

342 extern char *
	$strstr
 (const char *
__haystack
, const char *
__needle
)

343 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

348 extern char *
	$strtok
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
)

349 
__THROW
 
	`__nonnull
 ((2));

350 
__END_NAMESPACE_STD


354 extern char *
	$__strtok_r
 (char *
__restrict
 
__s
,

355 const char *
__restrict
 
__delim
,

356 char **
__restrict
 
__save_ptr
)

357 
__THROW
 
	`__nonnull
 ((2, 3));

358 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


359 extern char *
	$strtok_r
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
,

360 char **
__restrict
 
__save_ptr
)

361 
__THROW
 
	`__nonnull
 ((2, 3));

364 #ifdef 
__USE_GNU


366 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


367 extern "C++" char *
	$strcasestr
 (char *
__haystack
, const char *
__needle
)

368 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

369 extern "C++" const char *
	$strcasestr
 (const char *
__haystack
,

370 const char *
__needle
)

371 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

373 extern char *
	$strcasestr
 (const char *
__haystack
, const char *
__needle
)

374 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

378 #ifdef 
__USE_GNU


382 extern void *
	$memmem
 (const void *
__haystack
, 
size_t
 
__haystacklen
,

383 const void *
__needle
, 
size_t
 
__needlelen
)

384 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 3));

388 extern void *
	$__mempcpy
 (void *
__restrict
 
__dest
,

389 const void *
__restrict
 
__src
, 
size_t
 
__n
)

390 
__THROW
 
	`__nonnull
 ((1, 2));

391 extern void *
	$mempcpy
 (void *
__restrict
 
__dest
,

392 const void *
__restrict
 
__src
, 
size_t
 
__n
)

393 
__THROW
 
	`__nonnull
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 extern 
size_t
 
	$strlen
 (const char *
__s
)

400 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 extern 
size_t
 
	$strnlen
 (const char *
__string
, 
size_t
 
__maxlen
)

407 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 extern char *
	$strerror
 (int 
__errnum
) 
__THROW
;

414 
__END_NAMESPACE_STD


415 #if 
defined
 
__USE_XOPEN2K
 || defined 
__USE_MISC


423 #if 
defined
 
__USE_XOPEN2K
 && !defined 
__USE_GNU


426 #ifdef 
__REDIRECT_NTH


427 extern int 
	`__REDIRECT_NTH
 (
strerror_r
,

428 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
),

429 
__xpg_strerror_r
) 
	`__nonnull
 ((2));

431 extern int 
	$__xpg_strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

432 
__THROW
 
	`__nonnull
 ((2));

433 #define 
	#strerror_r
 
__xpg_strerror_r


	)

438 extern char *
	$strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

439 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

443 #ifdef 
__USE_XOPEN2K8


445 extern char *
	$strerror_l
 (int 
__errnum
, 
__locale_t
 
__l
) 
__THROW
;

451 extern void 
	$__bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

453 #ifdef 
__USE_BSD


455 extern void 
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__n
)

456 
__THROW
 
	`__nonnull
 ((1, 2));

459 extern void 
	$bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

462 extern int 
	$bcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

466 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


469 extern char *
	`index
 (char *
__s
, int 
__c
)

470 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

471 extern const char *
	`index
 (const char *
__s
, int 
__c
)

472 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

474 #if 
defined
 
__OPTIMIZE__
 && !defined 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__extern_always_inline
 char *

476 
	`index
 (char *
__s
, int 
__c
) 
__THROW


478 return 
	`__builtin_index
 (
__s
, 
__c
);

481 
__extern_always_inline
 const char *

482 
	`index
 (const char *
__s
, int 
__c
) 
__THROW


484 return 
	`__builtin_index
 (
__s
, 
__c
);

487 
	}
}

489 extern char *
	$index
 (const char *
__s
, int 
__c
)

490 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

494 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


497 extern char *
	`rindex
 (char *
__s
, int 
__c
)

498 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

499 extern const char *
	`rindex
 (const char *
__s
, int 
__c
)

500 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

502 #if 
defined
 
__OPTIMIZE__
 && !defined 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__extern_always_inline
 char *

504 
	`rindex
 (char *
__s
, int 
__c
) 
__THROW


506 return 
	`__builtin_rindex
 (
__s
, 
__c
);

509 
__extern_always_inline
 const char *

510 
	`rindex
 (const char *
__s
, int 
__c
) 
__THROW


512 return 
	`__builtin_rindex
 (
__s
, 
__c
);

515 
	}
}

517 extern char *
	$rindex
 (const char *
__s
, int 
__c
)

518 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

523 extern int 
	$ffs
 (int 
__i
) 
__THROW
 
	`__attribute__
 ((
__const__
));

527 #ifdef 
__USE_GNU


528 extern int 
	$ffsl
 (long int 
__l
) 
__THROW
 
	`__attribute__
 ((
__const__
));

529 
__extension__
 extern int 
	$ffsll
 (long long int 
__ll
)

530 
__THROW
 
	`__attribute__
 ((
__const__
));

534 extern int 
	$strcasecmp
 (const char *
__s1
, const char *
__s2
)

535 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

538 extern int 
	$strncasecmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

542 #ifdef 
__USE_GNU


545 extern int 
	$strcasecmp_l
 (const char *
__s1
, const char *
__s2
,

546 
__locale_t
 
__loc
)

547 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

549 extern int 
	$strncasecmp_l
 (const char *
__s1
, const char *
__s2
,

550 
size_t
 
__n
, 
__locale_t
 
__loc
)

551 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 extern char *
	$strsep
 (char **
__restrict
 
__stringp
,

558 const char *
__restrict
 
__delim
)

559 
__THROW
 
	`__nonnull
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 extern char *
	$strsignal
 (int 
__sig
) 
__THROW
;

567 extern char *
	$__stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

568 
__THROW
 
	`__nonnull
 ((1, 2));

569 extern char *
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

570 
__THROW
 
	`__nonnull
 ((1, 2));

574 extern char *
	$__stpncpy
 (char *
__restrict
 
__dest
,

575 const char *
__restrict
 
__src
, 
size_t
 
__n
)

576 
__THROW
 
	`__nonnull
 ((1, 2));

577 extern char *
	$stpncpy
 (char *
__restrict
 
__dest
,

578 const char *
__restrict
 
__src
, 
size_t
 
__n
)

579 
__THROW
 
	`__nonnull
 ((1, 2));

582 #ifdef 
__USE_GNU


584 extern int 
	$strverscmp
 (const char *
__s1
, const char *
__s2
)

585 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

588 extern char *
	$strfry
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

591 extern void *
	$memfrob
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

593 #ifndef 
basename


598 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


599 extern "C++" char *
	$basename
 (char *
__filename
)

600 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

601 extern "C++" const char *
	$basename
 (const char *
__filename
)

602 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

604 extern char *
	$basename
 (const char *
__filename
) 
__THROW
 
	`__nonnull
 ((1));

610 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

611 #if 
defined
 
__OPTIMIZE__
 && !defined 
__OPTIMIZE_SIZE__
 \

612 && !
defined
 
__NO_INLINE__
 && !defined 
__cplusplus


632 #include 
	~<bits/string.h
>

635 #include 
	~<bits/string2.h
>

638 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


640 #include 
	~<bits/string3.h
>

644 
__END_DECLS


	@/usr/include/unistd.h

22 #ifndef 
_UNISTD_H


23 #define 
	#_UNISTD_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


32 #ifdef 
__USE_XOPEN2K8


34 #define 
	#_POSIX_VERSION
 200809L

	)

35 #elif 
defined
 
__USE_XOPEN2K


37 #define 
	#_POSIX_VERSION
 200112L

	)

38 #elif 
defined
 
__USE_POSIX199506


40 #define 
	#_POSIX_VERSION
 199506L

	)

41 #elif 
defined
 
__USE_POSIX199309


43 #define 
	#_POSIX_VERSION
 199309L

	)

46 #define 
	#_POSIX_VERSION
 199009L

	)

52 #ifdef 
__USE_XOPEN2K8


53 #define 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #elif 
defined
 
__USE_XOPEN2K


57 #define 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #elif 
defined
 
__USE_POSIX199506


60 #define 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 #define 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 #define 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 #define 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 #define 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 #define 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 #define 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifdef 
__USE_XOPEN2K8


87 #define 
	#_XOPEN_VERSION
 700

	)

88 #elif 
defined
 
__USE_XOPEN2K


89 #define 
	#_XOPEN_VERSION
 600

	)

90 #elif 
defined
 
__USE_UNIX98


91 #define 
	#_XOPEN_VERSION
 500

	)

93 #define 
	#_XOPEN_VERSION
 4

	)

97 #define 
	#_XOPEN_XCU_VERSION
 4

	)

100 #define 
	#_XOPEN_XPG2
 1

	)

101 #define 
	#_XOPEN_XPG3
 1

	)

102 #define 
	#_XOPEN_XPG4
 1

	)

105 #define 
	#_XOPEN_UNIX
 1

	)

108 #define 
	#_XOPEN_CRYPT
 1

	)

112 #define 
	#_XOPEN_ENH_I18N
 1

	)

115 #define 
	#_XOPEN_LEGACY
 1

	)

202 #include 
	~<bits/posix_opt.h
>

205 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


206 #include 
	~<bits/environments.h
>

210 #define 
	#STDIN_FILENO
 0

	)

211 #define 
	#STDOUT_FILENO
 1

	)

212 #define 
	#STDERR_FILENO
 2

	)

217 #include 
	~<bits/types.h
>

219 #ifndef 
__ssize_t_defined


220 typedef 
__ssize_t
 
	tssize_t
;

221 #define 
	#__ssize_t_defined


	)

224 #define 
	#__need_size_t


	)

225 #define 
	#__need_NULL


	)

226 #include 
	~<stddef.h
>

228 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K


231 #ifndef 
__gid_t_defined


232 typedef 
__gid_t
 
	tgid_t
;

233 #define 
	#__gid_t_defined


	)

236 #ifndef 
__uid_t_defined


237 typedef 
__uid_t
 
	tuid_t
;

238 #define 
	#__uid_t_defined


	)

241 #ifndef 
__off_t_defined


242 #ifndef 
__USE_FILE_OFFSET64


243 typedef 
__off_t
 
	toff_t
;

245 typedef 
__off64_t
 
	toff_t
;

247 #define 
	#__off_t_defined


	)

249 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


250 typedef 
__off64_t
 
	toff64_t
;

251 #define 
	#__off64_t_defined


	)

254 #ifndef 
__useconds_t_defined


255 typedef 
__useconds_t
 
	tuseconds_t
;

256 #define 
	#__useconds_t_defined


	)

259 #ifndef 
__pid_t_defined


260 typedef 
__pid_t
 
	tpid_t
;

261 #define 
	#__pid_t_defined


	)

265 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


266 #ifndef 
__intptr_t_defined


267 typedef 
__intptr_t
 
	tintptr_t
;

268 #define 
	#__intptr_t_defined


	)

272 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN


273 #ifndef 
__socklen_t_defined


274 typedef 
__socklen_t
 
	tsocklen_t
;

275 #define 
	#__socklen_t_defined


	)

281 #define 
	#R_OK
 4

	)

282 #define 
	#W_OK
 2

	)

283 #define 
	#X_OK
 1

	)

284 #define 
	#F_OK
 0

	)

287 extern int 
	$access
 (const char *
__name
, int 
__type
) 
__THROW
 
	`__nonnull
 ((1));

289 #ifdef 
__USE_GNU


292 extern int 
	$euidaccess
 (const char *
__name
, int 
__type
)

293 
__THROW
 
	`__nonnull
 ((1));

296 extern int 
	$eaccess
 (const char *
__name
, int 
__type
)

297 
__THROW
 
	`__nonnull
 ((1));

300 #ifdef 
__USE_ATFILE


304 extern int 
	$faccessat
 (int 
__fd
, const char *
__file
, int 
__type
, int 
__flag
)

305 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

310 #ifndef 
_STDIO_H


311 #define 
	#SEEK_SET
 0

	)

312 #define 
	#SEEK_CUR
 1

	)

313 #define 
	#SEEK_END
 2

	)

314 #ifdef 
__USE_GNU


315 #define 
	#SEEK_DATA
 3

	)

316 #define 
	#SEEK_HOLE
 4

	)

320 #if 
defined
 
__USE_BSD
 && !defined 
L_SET


322 #define 
	#L_SET
 
SEEK_SET


	)

323 #define 
	#L_INCR
 
SEEK_CUR


	)

324 #define 
	#L_XTND
 
SEEK_END


	)

333 #ifndef 
__USE_FILE_OFFSET64


334 extern 
__off_t
 
	$lseek
 (int 
__fd
, 
__off_t
 
__offset
, int 
__whence
) 
__THROW
;

336 #ifdef 
__REDIRECT_NTH


337 extern 
__off64_t
 
	`__REDIRECT_NTH
 (
lseek
,

338 (int 
__fd
, 
__off64_t
 
__offset
, int 
__whence
),

339 
lseek64
);

341 #define 
	#lseek
 
lseek64


	)

344 #ifdef 
__USE_LARGEFILE64


345 extern 
__off64_t
 
	$lseek64
 (int 
__fd
, 
__off64_t
 
__offset
, int 
__whence
)

346 
__THROW
;

353 extern int 
	`close
 (int 
__fd
);

360 extern 
ssize_t
 
	$read
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
) 
__wur
;

366 extern 
ssize_t
 
	$write
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
) 
__wur
;

368 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


369 #ifndef 
__USE_FILE_OFFSET64


376 extern 
ssize_t
 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

377 
__off_t
 
__offset
) 
__wur
;

384 extern 
ssize_t
 
	$pwrite
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__offset
) 
__wur
;

387 #ifdef 
__REDIRECT


388 extern 
ssize_t
 
	`__REDIRECT
 (
pread
, (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

389 
__off64_t
 
__offset
),

390 
pread64
) 
__wur
;

391 extern 
ssize_t
 
	`__REDIRECT
 (
pwrite
, (int 
__fd
, const void *
__buf
,

392 
size_t
 
__nbytes
, 
__off64_t
 
__offset
),

393 
pwrite64
) 
__wur
;

395 #define 
	#pread
 
pread64


	)

396 #define 
	#pwrite
 
pwrite64


	)

400 #ifdef 
__USE_LARGEFILE64


404 extern 
ssize_t
 
	$pread64
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

405 
__off64_t
 
__offset
) 
__wur
;

408 extern 
ssize_t
 
	$pwrite64
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__offset
) 
__wur
;

417 extern int 
	$pipe
 (int 
__pipedes
[2]) 
__THROW
 
__wur
;

419 #ifdef 
__USE_GNU


422 extern int 
	$pipe2
 (int 
__pipedes
[2], int 
__flags
) 
__THROW
 
__wur
;

432 extern unsigned int 
	$alarm
 (unsigned int 
__seconds
) 
__THROW
;

444 extern unsigned int 
	`sleep
 (unsigned int 
__seconds
);

446 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

447 || 
defined
 
__USE_BSD


452 extern 
__useconds_t
 
	$ualarm
 (
__useconds_t
 
__value
, __useconds_t 
__interval
)

453 
__THROW
;

460 extern int 
	`usleep
 (
__useconds_t
 
__useconds
);

469 extern int 
	`pause
 (void);

473 extern int 
	$chown
 (const char *
__file
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

476 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


478 extern int 
	$fchown
 (int 
__fd
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
) 
__THROW
 
__wur
;

483 extern int 
	$lchown
 (const char *
__file
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

488 #ifdef 
__USE_ATFILE


491 extern int 
	$fchownat
 (int 
__fd
, const char *
__file
, 
__uid_t
 
__owner
,

492 
__gid_t
 
__group
, int 
__flag
)

493 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

497 extern int 
	$chdir
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

499 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


501 extern int 
	$fchdir
 (int 
__fd
) 
__THROW
 
__wur
;

511 extern char *
	$getcwd
 (char *
__buf
, 
size_t
 
__size
) 
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 extern char *
	$get_current_dir_name
 (void) 
__THROW
;

520 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

521 || 
defined
 
__USE_BSD


525 extern char *
	$getwd
 (char *
__buf
)

526 
__THROW
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
 
__wur
;

531 extern int 
	$dup
 (int 
__fd
) 
__THROW
 
__wur
;

534 extern int 
	$dup2
 (int 
__fd
, int 
__fd2
) 
__THROW
;

536 #ifdef 
__USE_GNU


539 extern int 
	$dup3
 (int 
__fd
, int 
__fd2
, int 
__flags
) 
__THROW
;

543 extern char **
__environ
;

544 #ifdef 
__USE_GNU


545 extern char **
environ
;

551 extern int 
	$execve
 (const char *
__path
, char *const 
__argv
[],

552 char *const 
__envp
[]) 
__THROW
 
	`__nonnull
 ((1, 2));

554 #ifdef 
__USE_XOPEN2K8


557 extern int 
	$fexecve
 (int 
__fd
, char *const 
__argv
[], char *const 
__envp
[])

558 
__THROW
 
	`__nonnull
 ((2));

563 extern int 
	$execv
 (const char *
__path
, char *const 
__argv
[])

564 
__THROW
 
	`__nonnull
 ((1, 2));

568 extern int 
	$execle
 (const char *
__path
, const char *
__arg
, ...)

569 
__THROW
 
	`__nonnull
 ((1, 2));

573 extern int 
	$execl
 (const char *
__path
, const char *
__arg
, ...)

574 
__THROW
 
	`__nonnull
 ((1, 2));

578 extern int 
	$execvp
 (const char *
__file
, char *const 
__argv
[])

579 
__THROW
 
	`__nonnull
 ((1, 2));

584 extern int 
	$execlp
 (const char *
__file
, const char *
__arg
, ...)

585 
__THROW
 
	`__nonnull
 ((1, 2));

587 #ifdef 
__USE_GNU


590 extern int 
	$execvpe
 (const char *
__file
, char *const 
__argv
[],

591 char *const 
__envp
[])

592 
__THROW
 
	`__nonnull
 ((1, 2));

596 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


598 extern int 
	$nice
 (int 
__inc
) 
__THROW
 
__wur
;

603 extern void 
	$_exit
 (int 
__status
) 
	`__attribute__
 ((
__noreturn__
));

609 #include 
	~<bits/confname.h
>

612 extern long int 
	$pathconf
 (const char *
__path
, int 
__name
)

613 
__THROW
 
	`__nonnull
 ((1));

616 extern long int 
	$fpathconf
 (int 
__fd
, int 
__name
) 
__THROW
;

619 extern long int 
	$sysconf
 (int 
__name
) 
__THROW
;

621 #ifdef 
__USE_POSIX2


623 extern 
size_t
 
	$confstr
 (int 
__name
, char *
__buf
, 
size_t
 
__len
) 
__THROW
;

628 extern 
__pid_t
 
	$getpid
 (void) 
__THROW
;

631 extern 
__pid_t
 
	$getppid
 (void) 
__THROW
;

634 extern 
__pid_t
 
	$getpgrp
 (void) 
__THROW
;

637 extern 
__pid_t
 
	$__getpgid
 (
__pid_t
 
__pid
) 
__THROW
;

638 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


639 extern 
__pid_t
 
	$getpgid
 (
__pid_t
 
__pid
) 
__THROW
;

646 extern int 
	$setpgid
 (
__pid_t
 
__pid
, __pid_t 
__pgid
) 
__THROW
;

648 #if 
defined
 
__USE_SVID
 || defined 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


660 extern int 
	$setpgrp
 (void) 
__THROW
;

667 extern 
__pid_t
 
	$setsid
 (void) 
__THROW
;

669 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


671 extern 
__pid_t
 
	$getsid
 (
__pid_t
 
__pid
) 
__THROW
;

675 extern 
__uid_t
 
	$getuid
 (void) 
__THROW
;

678 extern 
__uid_t
 
	$geteuid
 (void) 
__THROW
;

681 extern 
__gid_t
 
	$getgid
 (void) 
__THROW
;

684 extern 
__gid_t
 
	$getegid
 (void) 
__THROW
;

689 extern int 
	$getgroups
 (int 
__size
, 
__gid_t
 
__list
[]) 
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 extern int 
	$group_member
 (
__gid_t
 
__gid
) 
__THROW
;

700 extern int 
	$setuid
 (
__uid_t
 
__uid
) 
__THROW
 
__wur
;

702 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


705 extern int 
	$setreuid
 (
__uid_t
 
__ruid
, __uid_t 
__euid
) 
__THROW
 
__wur
;

708 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K


710 extern int 
	$seteuid
 (
__uid_t
 
__uid
) 
__THROW
 
__wur
;

717 extern int 
	$setgid
 (
__gid_t
 
__gid
) 
__THROW
 
__wur
;

719 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


722 extern int 
	$setregid
 (
__gid_t
 
__rgid
, __gid_t 
__egid
) 
__THROW
 
__wur
;

725 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN2K


727 extern int 
	$setegid
 (
__gid_t
 
__gid
) 
__THROW
 
__wur
;

730 #ifdef 
__USE_GNU


733 extern int 
	$getresuid
 (
__uid_t
 *
__ruid
, __uid_t *
__euid
, __uid_t *
__suid
)

734 
__THROW
;

738 extern int 
	$getresgid
 (
__gid_t
 *
__rgid
, __gid_t *
__egid
, __gid_t *
__sgid
)

739 
__THROW
;

743 extern int 
	$setresuid
 (
__uid_t
 
__ruid
, __uid_t 
__euid
, __uid_t 
__suid
)

744 
__THROW
 
__wur
;

748 extern int 
	$setresgid
 (
__gid_t
 
__rgid
, __gid_t 
__egid
, __gid_t 
__sgid
)

749 
__THROW
 
__wur
;

756 extern 
__pid_t
 
	$fork
 (void) 
__THROWNL
;

758 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

759 || 
defined
 
__USE_BSD


764 extern 
__pid_t
 
	$vfork
 (void) 
__THROW
;

770 extern char *
	$ttyname
 (int 
__fd
) 
__THROW
;

774 extern int 
	$ttyname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
)

775 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

779 extern int 
	$isatty
 (int 
__fd
) 
__THROW
;

781 #if 
defined
 
__USE_BSD
 \

782 || (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_UNIX98
)

785 extern int 
	$ttyslot
 (void) 
__THROW
;

790 extern int 
	$link
 (const char *
__from
, const char *
__to
)

791 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

793 #ifdef 
__USE_ATFILE


796 extern int 
	$linkat
 (int 
__fromfd
, const char *
__from
, int 
__tofd
,

797 const char *
__to
, int 
__flags
)

798 
__THROW
 
	`__nonnull
 ((2, 4)) 
__wur
;

801 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


803 extern int 
	$symlink
 (const char *
__from
, const char *
__to
)

804 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

809 extern 
ssize_t
 
	$readlink
 (const char *
__restrict
 
__path
,

810 char *
__restrict
 
__buf
, 
size_t
 
__len
)

811 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

814 #ifdef 
__USE_ATFILE


816 extern int 
	$symlinkat
 (const char *
__from
, int 
__tofd
,

817 const char *
__to
) 
__THROW
 
	`__nonnull
 ((1, 3)) 
__wur
;

820 extern 
ssize_t
 
	$readlinkat
 (int 
__fd
, const char *
__restrict
 
__path
,

821 char *
__restrict
 
__buf
, 
size_t
 
__len
)

822 
__THROW
 
	`__nonnull
 ((2, 3)) 
__wur
;

826 extern int 
	$unlink
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

828 #ifdef 
__USE_ATFILE


830 extern int 
	$unlinkat
 (int 
__fd
, const char *
__name
, int 
__flag
)

831 
__THROW
 
	`__nonnull
 ((2));

835 extern int 
	$rmdir
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1));

839 extern 
__pid_t
 
	$tcgetpgrp
 (int 
__fd
) 
__THROW
;

842 extern int 
	$tcsetpgrp
 (int 
__fd
, 
__pid_t
 
__pgrp_id
) 
__THROW
;

849 extern char *
	`getlogin
 (void);

850 #if 
defined
 
__USE_REENTRANT
 || defined 
__USE_POSIX199506


857 extern int 
	$getlogin_r
 (char *
__name
, 
size_t
 
__name_len
) 
	`__nonnull
 ((1));

860 #ifdef 
__USE_BSD


862 extern int 
	$setlogin
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

866 #ifdef 
__USE_POSIX2


870 #define 
	#__need_getopt


	)

871 #include 
	~<getopt.h
>

875 #if 
defined
 
__USE_BSD
 || defined 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


879 extern int 
	$gethostname
 (char *
__name
, 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((1));

883 #if 
defined
 
__USE_BSD
 || (defined 
__USE_XOPEN
 && !defined 
__USE_UNIX98
)

886 extern int 
	$sethostname
 (const char *
__name
, 
size_t
 
__len
)

887 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

891 extern int 
	$sethostid
 (long int 
__id
) 
__THROW
 
__wur
;

897 extern int 
	$getdomainname
 (char *
__name
, 
size_t
 
__len
)

898 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

899 extern int 
	$setdomainname
 (const char *
__name
, 
size_t
 
__len
)

900 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

906 extern int 
	$vhangup
 (void) 
__THROW
;

909 extern int 
	$revoke
 (const char *
__file
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

917 extern int 
	$profil
 (unsigned short int *
__sample_buffer
, 
size_t
 
__size
,

918 
size_t
 
__offset
, unsigned int 
__scale
)

919 
__THROW
 
	`__nonnull
 ((1));

925 extern int 
	$acct
 (const char *
__name
) 
__THROW
;

929 extern char *
	$getusershell
 (void) 
__THROW
;

930 extern void 
	$endusershell
 (void) 
__THROW
;

931 extern void 
	$setusershell
 (void) 
__THROW
;

937 extern int 
	$daemon
 (int 
__nochdir
, int 
__noclose
) 
__THROW
 
__wur
;

941 #if 
defined
 
__USE_BSD
 || (defined 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

944 extern int 
	$chroot
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

948 extern char *
	$getpass
 (const char *
__prompt
) 
	`__nonnull
 ((1));

956 extern int 
	`fsync
 (int 
__fd
);

959 #ifdef 
__USE_GNU


962 extern int 
	$syncfs
 (int 
__fd
) 
__THROW
;

966 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED


969 extern long int 
	`gethostid
 (void);

972 extern void 
	$sync
 (void) 
__THROW
;

975 #if 
defined
 
__USE_BSD
 || !defined 
__USE_XOPEN2K


978 extern int 
	$getpagesize
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

983 extern int 
	$getdtablesize
 (void) 
__THROW
;

989 #if 
defined
 
__USE_BSD
 || defined 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


992 #ifndef 
__USE_FILE_OFFSET64


993 extern int 
	$truncate
 (const char *
__file
, 
__off_t
 
__length
)

994 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

996 #ifdef 
__REDIRECT_NTH


997 extern int 
	`__REDIRECT_NTH
 (
truncate
,

998 (const char *
__file
, 
__off64_t
 
__length
),

999 
truncate64
) 
	`__nonnull
 ((1)) 
__wur
;

1001 #define 
	#truncate
 
truncate64


	)

1004 #ifdef 
__USE_LARGEFILE64


1005 extern int 
	$truncate64
 (const char *
__file
, 
__off64_t
 
__length
)

1006 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

1011 #if 
defined
 
__USE_BSD
 || defined 
__USE_POSIX199309
 \

1012 || 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


1015 #ifndef 
__USE_FILE_OFFSET64


1016 extern int 
	$ftruncate
 (int 
__fd
, 
__off_t
 
__length
) 
__THROW
 
__wur
;

1018 #ifdef 
__REDIRECT_NTH


1019 extern int 
	`__REDIRECT_NTH
 (
ftruncate
, (int 
__fd
, 
__off64_t
 
__length
),

1020 
ftruncate64
) 
__wur
;

1022 #define 
	#ftruncate
 
ftruncate64


	)

1025 #ifdef 
__USE_LARGEFILE64


1026 extern int 
	$ftruncate64
 (int 
__fd
, 
__off64_t
 
__length
) 
__THROW
 
__wur
;

1032 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K
) \

1033 || 
defined
 
__USE_MISC


1037 extern int 
	$brk
 (void *
__addr
) 
__THROW
 
__wur
;

1043 extern void *
	$sbrk
 (
intptr_t
 
__delta
) 
__THROW
;

1047 #ifdef 
__USE_MISC


1058 extern long int 
	$syscall
 (long int 
__sysno
, ...) 
__THROW
;

1063 #if (
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
) && !defined 
F_LOCK


1075 #define 
	#F_ULOCK
 0

	)

1076 #define 
	#F_LOCK
 1

	)

1077 #define 
	#F_TLOCK
 2

	)

1078 #define 
	#F_TEST
 3

	)

1080 #ifndef 
__USE_FILE_OFFSET64


1081 extern int 
	$lockf
 (int 
__fd
, int 
__cmd
, 
__off_t
 
__len
) 
__wur
;

1083 #ifdef 
__REDIRECT


1084 extern int 
	`__REDIRECT
 (
lockf
, (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
),

1085 
lockf64
) 
__wur
;

1087 #define 
	#lockf
 
lockf64


	)

1090 #ifdef 
__USE_LARGEFILE64


1091 extern int 
	$lockf64
 (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
) 
__wur
;

1096 #ifdef 
__USE_GNU


1101 #define 
	#TEMP_FAILURE_RETRY
(
expression
) \

1102 (
__extension__
 \

1103 ({ long int 
__result
; \

1104 do 
__result
 = (long int) (
expression
); \

1105 while (
__result
 == -1L && 
errno
 == 
EINTR
); \

1106 
__result
; 
	}
}))

	)

1109 #if 
defined
 
__USE_POSIX199309
 || defined 
__USE_UNIX98


1112 extern int 
fdatasync
 (int 
__fildes
);

1118 #ifdef 
__USE_XOPEN


1120 extern char *
	$crypt
 (const char *
__key
, const char *
__salt
)

1121 
__THROW
 
	`__nonnull
 ((1, 2));

1125 extern void 
	$encrypt
 (char *
__glibc_block
, int 
__edflag
)

1126 
__THROW
 
	`__nonnull
 ((1));

1133 extern void 
	$swab
 (const void *
__restrict
 
__from
, void *__restrict 
__to
,

1134 
ssize_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

1140 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K


1142 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

1147 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


1148 #include 
	~<bits/unistd.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #ifndef 
_ALLOCA_H


19 #define 
	#_ALLOCA_H
 1

	)

21 #include 
	~<features.h
>

23 #define 
	#__need_size_t


	)

24 #include 
	~<stddef.h
>

26 
	g__BEGIN_DECLS


29 #undef 
alloca


32 extern void *
	$alloca
 (
size_t
 
__size
) 
__THROW
;

34 #ifdef 
__GNUC__


35 #define 
	#alloca
(
size
) 
	`__builtin_alloca
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #ifndef 
_ENDIAN_H


19 #define 
	#_ENDIAN_H
 1

	)

21 #include 
	~<features.h
>

31 #define 
	#__LITTLE_ENDIAN
 1234

	)

32 #define 
	#__BIG_ENDIAN
 4321

	)

33 #define 
	#__PDP_ENDIAN
 3412

	)

36 #include 
	~<bits/endian.h
>

40 #ifndef 
__FLOAT_WORD_ORDER


41 #define 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 #define 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 #define 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 #define 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 #define 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


52 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) LO, 
	)
HI

53 #elif 
__BYTE_ORDER
 == 
__BIG_ENDIAN


54 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) HI, 
	)
LO

58 #if 
defined
 
__USE_BSD
 && !defined 
__ASSEMBLER__


60 #include 
	~<bits/byteswap.h
>

62 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


63 #define 
	#htobe16
(
x
) 
	`__bswap_16
 (x)

	)

64 #define 
	#htole16
(
x
) (x)

	)

65 #define 
	#be16toh
(
x
) 
	`__bswap_16
 (x)

	)

66 #define 
	#le16toh
(
x
) (x)

	)

68 #define 
	#htobe32
(
x
) 
	`__bswap_32
 (x)

	)

69 #define 
	#htole32
(
x
) (x)

	)

70 #define 
	#be32toh
(
x
) 
	`__bswap_32
 (x)

	)

71 #define 
	#le32toh
(
x
) (x)

	)

73 #define 
	#htobe64
(
x
) 
	`__bswap_64
 (x)

	)

74 #define 
	#htole64
(
x
) (x)

	)

75 #define 
	#be64toh
(
x
) 
	`__bswap_64
 (x)

	)

76 #define 
	#le64toh
(
x
) (x)

	)

79 #define 
	#htobe16
(
x
) (x)

	)

80 #define 
	#htole16
(
x
) 
	`__bswap_16
 (x)

	)

81 #define 
	#be16toh
(
x
) (x)

	)

82 #define 
	#le16toh
(
x
) 
	`__bswap_16
 (x)

	)

84 #define 
	#htobe32
(
x
) (x)

	)

85 #define 
	#htole32
(
x
) 
	`__bswap_32
 (x)

	)

86 #define 
	#be32toh
(
x
) (x)

	)

87 #define 
	#le32toh
(
x
) 
	`__bswap_32
 (x)

	)

89 #define 
	#htobe64
(
x
) (x)

	)

90 #define 
	#htole64
(
x
) 
	`__bswap_64
 (x)

	)

91 #define 
	#be64toh
(
x
) (x)

	)

92 #define 
	#le64toh
(
x
) 
	`__bswap_64
 (x)

	)

	@/usr/include/features.h

18 #ifndef 
_FEATURES_H


19 #define 
	#_FEATURES_H
 1

	)

101 #undef 
__USE_ISOC11


102 #undef 
__USE_ISOC99


103 #undef 
__USE_ISOC95


104 #undef 
__USE_ISOCXX11


105 #undef 
__USE_POSIX


106 #undef 
__USE_POSIX2


107 #undef 
__USE_POSIX199309


108 #undef 
__USE_POSIX199506


109 #undef 
__USE_XOPEN


110 #undef 
__USE_XOPEN_EXTENDED


111 #undef 
__USE_UNIX98


112 #undef 
__USE_XOPEN2K


113 #undef 
__USE_XOPEN2KXSI


114 #undef 
__USE_XOPEN2K8


115 #undef 
__USE_XOPEN2K8XSI


116 #undef 
__USE_LARGEFILE


117 #undef 
__USE_LARGEFILE64


118 #undef 
__USE_FILE_OFFSET64


119 #undef 
__USE_BSD


120 #undef 
__USE_SVID


121 #undef 
__USE_MISC


122 #undef 
__USE_ATFILE


123 #undef 
__USE_GNU


124 #undef 
__USE_REENTRANT


125 #undef 
__USE_FORTIFY_LEVEL


126 #undef 
__KERNEL_STRICT_NAMES


130 #ifndef 
_LOOSE_KERNEL_NAMES


131 #define 
	#__KERNEL_STRICT_NAMES


	)

141 #if 
defined
 
__GNUC__
 && defined 
__GNUC_MINOR__


142 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) \

143 ((
__GNUC__
 << 16) + 
__GNUC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

145 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) 0

	)

150 #ifdef 
_GNU_SOURCE


151 #undef 
_ISOC95_SOURCE


152 #define 
	#_ISOC95_SOURCE
 1

	)

153 #undef 
_ISOC99_SOURCE


154 #define 
	#_ISOC99_SOURCE
 1

	)

155 #undef 
_ISOC11_SOURCE


156 #define 
	#_ISOC11_SOURCE
 1

	)

157 #undef 
_POSIX_SOURCE


158 #define 
	#_POSIX_SOURCE
 1

	)

159 #undef 
_POSIX_C_SOURCE


160 #define 
	#_POSIX_C_SOURCE
 200809L

	)

161 #undef 
_XOPEN_SOURCE


162 #define 
	#_XOPEN_SOURCE
 700

	)

163 #undef 
_XOPEN_SOURCE_EXTENDED


164 #define 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #undef 
_LARGEFILE64_SOURCE


166 #define 
	#_LARGEFILE64_SOURCE
 1

	)

167 #undef 
_DEFAULT_SOURCE


168 #define 
	#_DEFAULT_SOURCE
 1

	)

169 #undef 
_BSD_SOURCE


170 #define 
	#_BSD_SOURCE
 1

	)

171 #undef 
_SVID_SOURCE


172 #define 
	#_SVID_SOURCE
 1

	)

173 #undef 
_ATFILE_SOURCE


174 #define 
	#_ATFILE_SOURCE
 1

	)

179 #if (
defined
 
_DEFAULT_SOURCE
 \

180 || (!
defined
 
	g__STRICT_ANSI__
 \

181 && !
defined
 
	g_ISOC99_SOURCE
 \

182 && !
defined
 
	g_POSIX_SOURCE
 && !defined 
	g_POSIX_C_SOURCE
 \

183 && !
defined
 
	g_XOPEN_SOURCE
 \

184 && !
defined
 
	g_BSD_SOURCE
 && !defined 
	g_SVID_SOURCE
))

185 #undef 
_DEFAULT_SOURCE


186 #define 
	#_DEFAULT_SOURCE
 1

	)

187 #undef 
_BSD_SOURCE


188 #define 
	#_BSD_SOURCE
 1

	)

189 #undef 
_SVID_SOURCE


190 #define 
	#_SVID_SOURCE
 1

	)

194 #if (
defined
 
_ISOC11_SOURCE
 \

195 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 #define 
	#__USE_ISOC11
 1

	)

200 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

201 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 #define 
	#__USE_ISOC99
 1

	)

206 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

207 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 #define 
	#__USE_ISOC95
 1

	)

215 #if ((
defined
 
__cplusplus
 && __cplusplus >= 201103L) \

216 || 
defined
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 #define 
	#__USE_ISOCXX11
 1

	)

223 #ifdef 
_DEFAULT_SOURCE


224 #if !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE


225 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #undef 
_POSIX_SOURCE


228 #define 
	#_POSIX_SOURCE
 1

	)

229 #undef 
_POSIX_C_SOURCE


230 #define 
	#_POSIX_C_SOURCE
 200809L

	)

232 #if ((!
defined
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE
)

234 #define 
	#_POSIX_SOURCE
 1

	)

235 #if 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 #define 
	#_POSIX_C_SOURCE
 2

	)

237 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 #define 
	#_POSIX_C_SOURCE
 199506L

	)

239 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 #define 
	#_POSIX_C_SOURCE
 200112L

	)

242 #define 
	#_POSIX_C_SOURCE
 200809L

	)

244 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #if 
defined
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >= 1 || defined 
_XOPEN_SOURCE


248 #define 
	#__USE_POSIX
 1

	)

251 #if 
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 2 || defined 
_XOPEN_SOURCE


252 #define 
	#__USE_POSIX2
 1

	)

255 #if (
_POSIX_C_SOURCE
 - 0) >= 199309L

256 #define 
	#__USE_POSIX199309
 1

	)

259 #if (
_POSIX_C_SOURCE
 - 0) >= 199506L

260 #define 
	#__USE_POSIX199506
 1

	)

263 #if (
_POSIX_C_SOURCE
 - 0) >= 200112L

264 #define 
	#__USE_XOPEN2K
 1

	)

265 #undef 
__USE_ISOC95


266 #define 
	#__USE_ISOC95
 1

	)

267 #undef 
__USE_ISOC99


268 #define 
	#__USE_ISOC99
 1

	)

271 #if (
_POSIX_C_SOURCE
 - 0) >= 200809L

272 #define 
	#__USE_XOPEN2K8
 1

	)

273 #undef 
_ATFILE_SOURCE


274 #define 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 #define 
	#__USE_XOPEN
 1

	)

279 #if (
_XOPEN_SOURCE
 - 0) >= 500

280 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

281 #define 
	#__USE_UNIX98
 1

	)

282 #undef 
_LARGEFILE_SOURCE


283 #define 
	#_LARGEFILE_SOURCE
 1

	)

284 #if (
_XOPEN_SOURCE
 - 0) >= 600

285 #if (
_XOPEN_SOURCE
 - 0) >= 700

286 #define 
	#__USE_XOPEN2K8
 1

	)

287 #define 
	#__USE_XOPEN2K8XSI
 1

	)

289 #define 
	#__USE_XOPEN2K
 1

	)

290 #define 
	#__USE_XOPEN2KXSI
 1

	)

291 #undef 
__USE_ISOC95


292 #define 
	#__USE_ISOC95
 1

	)

293 #undef 
__USE_ISOC99


294 #define 
	#__USE_ISOC99
 1

	)

297 #ifdef 
_XOPEN_SOURCE_EXTENDED


298 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifdef 
_LARGEFILE_SOURCE


304 #define 
	#__USE_LARGEFILE
 1

	)

307 #ifdef 
_LARGEFILE64_SOURCE


308 #define 
	#__USE_LARGEFILE64
 1

	)

311 #if 
defined
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 #define 
	#__USE_FILE_OFFSET64
 1

	)

315 #if 
defined
 
_BSD_SOURCE
 || defined 
_SVID_SOURCE


316 #define 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 #define 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 #define 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 #define 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 #define 
	#__USE_GNU
 1

	)

335 #if 
defined
 
_REENTRANT
 || defined 
_THREAD_SAFE


336 #define 
	#__USE_REENTRANT
 1

	)

339 #if 
defined
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1) && 
defined
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #if 
_FORTIFY_SOURCE
 > 1

342 #define 
	#__USE_FORTIFY_LEVEL
 2

	)

344 #define 
	#__USE_FORTIFY_LEVEL
 1

	)

347 #define 
	#__USE_FORTIFY_LEVEL
 0

	)

352 #include 
	~<stdc-predef.h
>

360 #undef 
__GNU_LIBRARY__


361 #define 
	#__GNU_LIBRARY__
 6

	)

365 #define 
	#__GLIBC__
 2

	)

366 #define 
	#__GLIBC_MINOR__
 19

	)

368 #define 
	#__GLIBC_PREREQ
(
maj
, 
min
) \

369 ((
__GLIBC__
 << 16) + 
__GLIBC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

372 #ifndef 
__ASSEMBLER__


373 #ifndef 
_SYS_CDEFS_H


374 #include 
	~<sys/cdefs.h
>

379 #if 
defined
 
__USE_FILE_OFFSET64
 && !defined 
__REDIRECT


380 #define 
	#__USE_LARGEFILE
 1

	)

381 #define 
	#__USE_LARGEFILE64
 1

	)

387 #if 
__GNUC_PREREQ
 (2, 7) && 
defined
 
__OPTIMIZE__
 \

388 && !
defined
 
	g__OPTIMIZE_SIZE__
 && !defined 
	g__NO_INLINE__
 \

389 && 
defined
 
	g__extern_inline


390 #define 
	#__USE_EXTERN_INLINES
 1

	)

398 #include 
	~<gnu/stubs.h
>

	@/usr/include/getopt.h

19 #ifndef 
_GETOPT_H


21 #ifndef 
__need_getopt


22 #define 
	#_GETOPT_H
 1

	)

32 #if !
defined
 
__GNU_LIBRARY__


33 #include 
	~<ctype.h
>

36 #ifndef 
__THROW


37 #ifndef 
__GNUC_PREREQ


38 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) (0)

	)

40 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

41 #define 
	#__THROW
 
	`throw
 ()

	)

43 #define 
	#__THROW


	)

47 #ifdef 
__cplusplus


57 extern char *
optarg
;

71 extern int 
optind
;

76 extern int 
opterr
;

80 extern int 
optopt
;

82 #ifndef 
__need_getopt


104 struct 
	soption


106 const char *
	gname
;

109 int 
	ghas_arg
;

110 int *
	gflag
;

111 int 
	gval
;

116 #define 
	#no_argument
 0

	)

117 #define 
	#required_argument
 1

	)

118 #define 
	#optional_argument
 2

	)

146 #ifdef 
__GNU_LIBRARY__


150 extern int 
getopt
 (int 
___argc
, char *const *
___argv
, const char *
__shortopts
)

151 
__THROW
;

153 #if 
defined
 
__need_getopt
 && defined 
__USE_POSIX2
 \

154 && !
defined
 
	g__USE_POSIX_IMPLICITLY
 && !defined 
	g__USE_GNU


158 #ifdef 
__REDIRECT


159 extern int 
__REDIRECT_NTH
 (
getopt
, (int 
___argc
, char *const *
___argv
,

160 const char *
__shortopts
),

161 
__posix_getopt
);

163 extern int 
__posix_getopt
 (int 
___argc
, char *const *
___argv
,

164 const char *
__shortopts
) 
__THROW
;

165 #define 
	#getopt
 
__posix_getopt


	)

169 extern int 
getopt
 ();

172 #ifndef 
__need_getopt


173 extern int 
getopt_long
 (int 
___argc
, char *const *
___argv
,

174 const char *
__shortopts
,

175 const struct 
option
 *
__longopts
, int *
__longind
)

176 
__THROW
;

177 extern int 
getopt_long_only
 (int 
___argc
, char *const *
___argv
,

178 const char *
__shortopts
,

179 const struct 
option
 *
__longopts
, int *
__longind
)

180 
__THROW
;

184 #ifdef 
__cplusplus


189 #undef 
__need_getopt


	@/usr/include/libio.h

28 #ifndef 
_IO_STDIO_H


29 #define 
	#_IO_STDIO_H


	)

31 #include 
	~<_G_config.h
>

33 #define 
	#_IO_fpos_t
 
_G_fpos_t


	)

34 #define 
	#_IO_fpos64_t
 
_G_fpos64_t


	)

35 #define 
	#_IO_size_t
 
size_t


	)

36 #define 
	#_IO_ssize_t
 
__ssize_t


	)

37 #define 
	#_IO_off_t
 
__off_t


	)

38 #define 
	#_IO_off64_t
 
__off64_t


	)

39 #define 
	#_IO_pid_t
 
__pid_t


	)

40 #define 
	#_IO_uid_t
 
__uid_t


	)

41 #define 
	#_IO_iconv_t
 
_G_iconv_t


	)

42 #define 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 #define 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 #define 
	#_IO_va_list
 
_G_va_list


	)

45 #define 
	#_IO_wint_t
 
wint_t


	)

48 #define 
	#__need___va_list


	)

49 #include 
	~<stdarg.h
>

50 #ifdef 
__GNUC_VA_LIST


51 #undef 
_IO_va_list


52 #define 
	#_IO_va_list
 
__gnuc_va_list


	)

55 #ifndef 
__P


56 #include 
	~<sys/cdefs.h
>

59 #define 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #ifndef 
EOF


62 #define 
	#EOF
 (-1)

	)

64 #ifndef 
NULL


65 #if 
defined
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ == 2 && 
__GNUC_MINOR__
 >= 8))

67 #define 
	#NULL
 (
__null
)

	)

69 #if !
defined
(
__cplusplus
)

70 #define 
	#NULL
 ((void*)0)

	)

72 #define 
	#NULL
 (0)

	)

77 #define 
	#_IOS_INPUT
 1

	)

78 #define 
	#_IOS_OUTPUT
 2

	)

79 #define 
	#_IOS_ATEND
 4

	)

80 #define 
	#_IOS_APPEND
 8

	)

81 #define 
	#_IOS_TRUNC
 16

	)

82 #define 
	#_IOS_NOCREATE
 32

	)

83 #define 
	#_IOS_NOREPLACE
 64

	)

84 #define 
	#_IOS_BIN
 128

	)

92 #define 
	#_IO_MAGIC
 0xFBAD0000

	)

93 #define 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 #define 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 #define 
	#_IO_USER_BUF
 1

	)

96 #define 
	#_IO_UNBUFFERED
 2

	)

97 #define 
	#_IO_NO_READS
 4

	)

98 #define 
	#_IO_NO_WRITES
 8

	)

99 #define 
	#_IO_EOF_SEEN
 0x10

	)

100 #define 
	#_IO_ERR_SEEN
 0x20

	)

101 #define 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 #define 
	#_IO_LINKED
 0x80

	)

103 #define 
	#_IO_IN_BACKUP
 0x100

	)

104 #define 
	#_IO_LINE_BUF
 0x200

	)

105 #define 
	#_IO_TIED_PUT_GET
 0x400

	)

106 #define 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 #define 
	#_IO_IS_APPENDING
 0x1000

	)

108 #define 
	#_IO_IS_FILEBUF
 0x2000

	)

109 #define 
	#_IO_BAD_SEEN
 0x4000

	)

110 #define 
	#_IO_USER_LOCK
 0x8000

	)

112 #define 
	#_IO_FLAGS2_MMAP
 1

	)

113 #define 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifdef 
_LIBC


115 #define 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 #define 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifdef 
_LIBC


119 #define 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 #define 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 #define 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 #define 
	#_IO_SKIPWS
 01

	)

126 #define 
	#_IO_LEFT
 02

	)

127 #define 
	#_IO_RIGHT
 04

	)

128 #define 
	#_IO_INTERNAL
 010

	)

129 #define 
	#_IO_DEC
 020

	)

130 #define 
	#_IO_OCT
 040

	)

131 #define 
	#_IO_HEX
 0100

	)

132 #define 
	#_IO_SHOWBASE
 0200

	)

133 #define 
	#_IO_SHOWPOINT
 0400

	)

134 #define 
	#_IO_UPPERCASE
 01000

	)

135 #define 
	#_IO_SHOWPOS
 02000

	)

136 #define 
	#_IO_SCIENTIFIC
 04000

	)

137 #define 
	#_IO_FIXED
 010000

	)

138 #define 
	#_IO_UNITBUF
 020000

	)

139 #define 
	#_IO_STDIO
 040000

	)

140 #define 
	#_IO_DONT_CLOSE
 0100000

	)

141 #define 
	#_IO_BOOLALPHA
 0200000

	)

144 struct 
_IO_jump_t
; struct 
	g_IO_FILE
;

147 #ifdef 
_IO_MTSAFE_IO


148 #if 
defined
 
__GLIBC__
 && __GLIBC__ >= 2

149 #include 
	~<bits/stdio-lock.h
>

154 typedef void 
	t_IO_lock_t
;

160 struct 
	s_IO_marker
 {

161 struct 
_IO_marker
 *
	m_next
;

162 struct 
_IO_FILE
 *
	m_sbuf
;

166 int 
	m_pos
;

168 void 
set_streampos
(
streampos
 
sp
) { 
	m_spos
 = sp; }

169 void 
set_offset
(int 
offset
) { 
	m_pos
 = offset; 
	m_spos
 = (
streampos
)(-2); }

170 
	mpublic
:

171 
streammarker
(
streambuf
 *
sb
);

172 ~
streammarker
();

173 int 
saving
() { return 
	m_spos
 == -2; }

174 int 
delta
(
streammarker
&);

175 int 
delta
();

180 enum 
	e__codecvt_result


182 
	m__codecvt_ok
,

183 
	m__codecvt_partial
,

184 
	m__codecvt_error
,

185 
	m__codecvt_noconv


188 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


191 struct 
	s_IO_codecvt


193 void (*
	m__codecvt_destr
) (struct 
	m_IO_codecvt
 *);

194 enum 
__codecvt_result
 (*
__codecvt_do_out
) (struct 
	m_IO_codecvt
 *,

195 
	m__mbstate_t
 *,

196 const 
	mwchar_t
 *,

197 const 
	mwchar_t
 *,

198 const 
	mwchar_t
 **, char *,

200 enum 
__codecvt_result
 (*
__codecvt_do_unshift
) (struct 
	m_IO_codecvt
 *,

201 
	m__mbstate_t
 *, char *,

203 enum 
__codecvt_result
 (*
__codecvt_do_in
) (struct 
	m_IO_codecvt
 *,

204 
	m__mbstate_t
 *,

206 const char **, 
	mwchar_t
 *,

207 
	mwchar_t
 *, wchar_t **);

208 int (*
	m__codecvt_do_encoding
) (struct 
	m_IO_codecvt
 *);

209 int (*
	m__codecvt_do_always_noconv
) (struct 
	m_IO_codecvt
 *);

210 int (*
	m__codecvt_do_length
) (struct 
	m_IO_codecvt
 *, 
	m__mbstate_t
 *,

211 const char *, const char *, 
	m_IO_size_t
);

212 int (*
	m__codecvt_do_max_length
) (struct 
	m_IO_codecvt
 *);

214 
_IO_iconv_t
 
	m__cd_in
;

215 
_IO_iconv_t
 
	m__cd_out
;

219 struct 
	s_IO_wide_data


221 
wchar_t
 *
	m_IO_read_ptr
;

222 
wchar_t
 *
	m_IO_read_end
;

223 
wchar_t
 *
	m_IO_read_base
;

224 
wchar_t
 *
	m_IO_write_base
;

225 
wchar_t
 *
	m_IO_write_ptr
;

226 
wchar_t
 *
	m_IO_write_end
;

227 
wchar_t
 *
	m_IO_buf_base
;

228 
wchar_t
 *
	m_IO_buf_end
;

230 
wchar_t
 *
	m_IO_save_base
;

231 
wchar_t
 *
	m_IO_backup_base
;

233 
wchar_t
 *
	m_IO_save_end
;

235 
__mbstate_t
 
	m_IO_state
;

236 
__mbstate_t
 
	m_IO_last_state
;

237 struct 
_IO_codecvt
 
	m_codecvt
;

239 
wchar_t
 
	m_shortbuf
[1];

241 const struct 
_IO_jump_t
 *
	m_wide_vtable
;

245 struct 
	s_IO_FILE
 {

246 int 
	m_flags
;

247 #define 
	#_IO_file_flags
 
_flags


	)

251 char* 
	m_IO_read_ptr
;

252 char* 
	m_IO_read_end
;

253 char* 
	m_IO_read_base
;

254 char* 
	m_IO_write_base
;

255 char* 
	m_IO_write_ptr
;

256 char* 
	m_IO_write_end
;

257 char* 
	m_IO_buf_base
;

258 char* 
	m_IO_buf_end
;

260 char *
	m_IO_save_base
;

261 char *
	m_IO_backup_base
;

262 char *
	m_IO_save_end
;

264 struct 
_IO_marker
 *
	m_markers
;

266 struct 
_IO_FILE
 *
	m_chain
;

268 int 
	m_fileno
;

270 int 
	m_blksize
;

272 int 
	m_flags2
;

274 
_IO_off_t
 
	m_old_offset
;

276 #define 
	#__HAVE_COLUMN


	)

278 unsigned short 
	m_cur_column
;

279 signed char 
	m_vtable_offset
;

280 char 
	m_shortbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifdef 
_IO_USE_OLD_IO_FILE


288 struct 
	s_IO_FILE_complete


290 struct 
_IO_FILE
 
	m_file
;

292 #if 
defined
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_offset
;

294 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


296 struct 
_IO_codecvt
 *
	m_codecvt
;

297 struct 
_IO_wide_data
 *
	m_wide_data
;

298 struct 
_IO_FILE
 *
	m_freeres_list
;

299 void *
	m_freeres_buf
;

300 
size_t
 
	m_freeres_size
;

302 void *
	m__pad1
;

303 void *
	m__pad2
;

304 void *
	m__pad3
;

305 void *
	m__pad4
;

306 
size_t
 
	m__pad5
;

308 int 
	m_mode
;

310 char 
	m_unused2
[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (
size_t
)];

314 #ifndef 
__cplusplus


315 typedef struct 
_IO_FILE
 
	t_IO_FILE
;

318 struct 
	g_IO_FILE_plus
;

320 extern struct 
_IO_FILE_plus
 
_IO_2_1_stdin_
;

321 extern struct 
_IO_FILE_plus
 
_IO_2_1_stdout_
;

322 extern struct 
_IO_FILE_plus
 
_IO_2_1_stderr_
;

323 #ifndef 
_LIBC


324 #define 
	#_IO_stdin
 ((
_IO_FILE
*)(&
_IO_2_1_stdin_
))

	)

325 #define 
	#_IO_stdout
 ((
_IO_FILE
*)(&
_IO_2_1_stdout_
))

	)

326 #define 
	#_IO_stderr
 ((
_IO_FILE
*)(&
_IO_2_1_stderr_
))

	)

328 extern 
_IO_FILE
 *
_IO_stdin
 
attribute_hidden
;

329 extern 
_IO_FILE
 *
_IO_stdout
 
attribute_hidden
;

330 extern 
_IO_FILE
 *
_IO_stderr
 
attribute_hidden
;

338 typedef 
__ssize_t
 
	t__io_read_fn
 (void *
	t__cookie
, char *
	t__buf
, 
	tsize_t
 
	t__nbytes
);

346 typedef 
__ssize_t
 
	t__io_write_fn
 (void *
	t__cookie
, const char *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 typedef int 
	t__io_seek_fn
 (void *
	t__cookie
, 
	t_IO_off64_t
 *
	t__pos
, int 
	t__w
);

358 typedef int 
	t__io_close_fn
 (void *
	t__cookie
);

361 #ifdef 
_GNU_SOURCE


363 typedef 
__io_read_fn
 
	tcookie_read_function_t
;

364 typedef 
__io_write_fn
 
	tcookie_write_function_t
;

365 typedef 
__io_seek_fn
 
	tcookie_seek_function_t
;

366 typedef 
__io_close_fn
 
	tcookie_close_function_t
;

371 
__io_read_fn
 *
	mread
;

372 
__io_write_fn
 *
	mwrite
;

373 
__io_seek_fn
 *
	mseek
;

374 
__io_close_fn
 *
	mclose
;

375 } 
	t_IO_cookie_io_functions_t
;

376 typedef 
_IO_cookie_io_functions_t
 
	tcookie_io_functions_t
;

378 struct 
	g_IO_cookie_file
;

381 extern void 
_IO_cookie_init
 (struct 
_IO_cookie_file
 *
__cfile
, int 
__read_write
,

382 void *
__cookie
, 
_IO_cookie_io_functions_t
 
__fns
);

386 #ifdef 
__cplusplus


390 extern int 
__underflow
 (
_IO_FILE
 *);

391 extern int 
__uflow
 (
_IO_FILE
 *);

392 extern int 
__overflow
 (
_IO_FILE
 *, int);

393 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


394 extern 
_IO_wint_t
 
__wunderflow
 (
_IO_FILE
 *);

395 extern 
_IO_wint_t
 
__wuflow
 (
_IO_FILE
 *);

396 extern 
_IO_wint_t
 
__woverflow
 (
_IO_FILE
 *, _IO_wint_t);

399 #if 
__GNUC__
 >= 3

400 #define 
	#_IO_BE
(
expr
, 
res
) 
	`__builtin_expect
 ((expr), res)

	)

402 #define 
	#_IO_BE
(
expr
, 
res
) (expr)

	)

405 #define 
	#_IO_getc_unlocked
(
_fp
) \

406 (
	`_IO_BE
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
, 0) \

407 ? 
	`__uflow
 (
_fp
) : *(unsigned char *) (_fp)->
_IO_read_ptr
++)

	)

408 #define 
	#_IO_peekc_unlocked
(
_fp
) \

409 (
	`_IO_BE
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
, 0) \

410 && 
	`__underflow
 (
_fp
) == 
EOF
 ? EOF \

411 : *(unsigned char *) (
_fp
)->
_IO_read_ptr
)

	)

412 #define 
	#_IO_putc_unlocked
(
_ch
, 
_fp
) \

413 (
	`_IO_BE
 ((
_fp
)->
_IO_write_ptr
 >= (_fp)->
_IO_write_end
, 0) \

414 ? 
	`__overflow
 (
_fp
, (unsigned char) (
_ch
)) \

415 : (unsigned char) (*(
_fp
)->
_IO_write_ptr
++ = (
_ch
)))

	)

417 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


418 #define 
	#_IO_getwc_unlocked
(
_fp
) \

419 (
	`_IO_BE
 ((
_fp
)->
_wide_data
 == 
NULL
 \

420 || ((
_fp
)->
_wide_data
->
_IO_read_ptr
 \

421 >= (
_fp
)->
_wide_data
->
_IO_read_end
), 0) \

422 ? 
	`__wuflow
 (
_fp
) : (
_IO_wint_t
) *(_fp)->
_wide_data
->
_IO_read_ptr
++)

	)

423 #define 
	#_IO_putwc_unlocked
(
_wch
, 
_fp
) \

424 (
	`_IO_BE
 ((
_fp
)->
_wide_data
 == 
NULL
 \

425 || ((
_fp
)->
_wide_data
->
_IO_write_ptr
 \

426 >= (
_fp
)->
_wide_data
->
_IO_write_end
), 0) \

427 ? 
	`__woverflow
 (
_fp
, 
_wch
) \

428 : (
_IO_wint_t
) (*(
_fp
)->
_wide_data
->
_IO_write_ptr
++ = (
_wch
)))

	)

431 #define 
	#_IO_feof_unlocked
(
__fp
) (((__fp)->
_flags
 & 
_IO_EOF_SEEN
) != 0)

	)

432 #define 
	#_IO_ferror_unlocked
(
__fp
) (((__fp)->
_flags
 & 
_IO_ERR_SEEN
) != 0)

	)

434 extern int 
_IO_getc
 (
_IO_FILE
 *
__fp
);

435 extern int 
_IO_putc
 (int 
__c
, 
_IO_FILE
 *
__fp
);

436 extern int 
_IO_feof
 (
_IO_FILE
 *
__fp
) 
__THROW
;

437 extern int 
_IO_ferror
 (
_IO_FILE
 *
__fp
) 
__THROW
;

439 extern int 
_IO_peekc_locked
 (
_IO_FILE
 *
__fp
);

442 #define 
	#_IO_PENDING_OUTPUT_COUNT
(
_fp
) \

443 ((
_fp
)->
_IO_write_ptr
 - (_fp)->
_IO_write_base
)

	)

445 extern void 
_IO_flockfile
 (
_IO_FILE
 *) 
__THROW
;

446 extern void 
_IO_funlockfile
 (
_IO_FILE
 *) 
__THROW
;

447 extern int 
_IO_ftrylockfile
 (
_IO_FILE
 *) 
__THROW
;

449 #ifdef 
_IO_MTSAFE_IO


450 #define 
	#_IO_peekc
(
_fp
) 
	`_IO_peekc_locked
 (_fp)

	)

451 #define 
	#_IO_flockfile
(
_fp
) \

452 if (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0) 
	`_IO_flockfile
 (_fp)

	)

453 #define 
	#_IO_funlockfile
(
_fp
) \

454 if (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0) 
	`_IO_funlockfile
 (_fp)

	)

456 #define 
	#_IO_peekc
(
_fp
) 
	`_IO_peekc_unlocked
 (_fp)

	)

457 #define 
	#_IO_flockfile
(
_fp
)

	)

458 #define 
	#_IO_funlockfile
(
_fp
)

	)

459 #define 
	#_IO_ftrylockfile
(
_fp
)

	)

460 #define 
	#_IO_cleanup_region_start
(
_fct
, 
_fp
)

	)

461 #define 
	#_IO_cleanup_region_end
(
_Doit
)

	)

464 extern int 
_IO_vfscanf
 (
_IO_FILE
 * 
__restrict
, const char * __restrict,

465 
_IO_va_list
, int *
__restrict
);

466 extern int 
_IO_vfprintf
 (
_IO_FILE
 *
__restrict
, const char *__restrict,

467 
_IO_va_list
);

468 extern 
_IO_ssize_t
 
_IO_padn
 (
_IO_FILE
 *, int, _IO_ssize_t);

469 extern 
_IO_size_t
 
_IO_sgetn
 (
_IO_FILE
 *, void *, _IO_size_t);

471 extern 
_IO_off64_t
 
_IO_seekoff
 (
_IO_FILE
 *, _IO_off64_t, int, int);

472 extern 
_IO_off64_t
 
_IO_seekpos
 (
_IO_FILE
 *, _IO_off64_t, int);

474 extern void 
_IO_free_backup_area
 (
_IO_FILE
 *) 
__THROW
;

476 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


477 extern 
_IO_wint_t
 
_IO_getwc
 (
_IO_FILE
 *
__fp
);

478 extern 
_IO_wint_t
 
_IO_putwc
 (
wchar_t
 
__wc
, 
_IO_FILE
 *
__fp
);

479 extern int 
_IO_fwide
 (
_IO_FILE
 *
__fp
, int 
__mode
) 
__THROW
;

480 #if 
__GNUC__
 >= 2

483 #if 
defined
 
_LIBC
 && defined 
SHARED


484 #include 
	~<shlib-compat.h
>

485 #if 
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 #define 
	#_IO_fwide_maybe_incompatible
 \

487 (
	`__builtin_expect
 (&
_IO_stdin_used
 == 
NULL
, 0))

	)

488 extern const int 
_IO_stdin_used
;

489 
weak_extern
 (
_IO_stdin_used
);

492 #ifndef 
_IO_fwide_maybe_incompatible


493 #define 
	#_IO_fwide_maybe_incompatible
 (0)

	)

497 #define 
	#_IO_fwide
(
__fp
, 
__mode
) \

498 ({ int 
__result
 = (
__mode
); \

499 if (
__result
 < 0 && ! 
_IO_fwide_maybe_incompatible
) \

501 if ((
__fp
)->
_mode
 == 0) \

503 (
__fp
)->
_mode
 = -1; \

504 
__result
 = (
__fp
)->
_mode
; \

506 else if (
	`__builtin_constant_p
 (
__mode
) && (__mode) == 0) \

507 
__result
 = 
_IO_fwide_maybe_incompatible
 ? -1 : (
__fp
)->
_mode
; \

509 
__result
 = 
	`_IO_fwide
 (
__fp
, __result); \

510 
__result
; })

	)

513 extern int 
_IO_vfwscanf
 (
_IO_FILE
 * 
__restrict
, const 
wchar_t
 * __restrict,

514 
_IO_va_list
, int *
__restrict
);

515 extern int 
_IO_vfwprintf
 (
_IO_FILE
 *
__restrict
, const 
wchar_t
 *__restrict,

516 
_IO_va_list
);

517 extern 
_IO_ssize_t
 
_IO_wpadn
 (
_IO_FILE
 *, 
wint_t
, _IO_ssize_t);

518 extern void 
_IO_free_wbackup_area
 (
_IO_FILE
 *) 
__THROW
;

521 #ifdef 
__LDBL_COMPAT


522 #include 
	~<bits/libio-ldbl.h
>

525 #ifdef 
__cplusplus


	@/usr/include/rpc/netdb.h

36 #ifndef 
_RPC_NETDB_H


37 #define 
	#_RPC_NETDB_H
 1

	)

39 #include 
	~<features.h
>

41 #define 
	#__need_size_t


	)

42 #include 
	~<stddef.h
>

44 
__BEGIN_DECLS


46 struct 
	srpcent


48 char *
	mr_name
;

49 char **
	mr_aliases
;

50 int 
	mr_number
;

53 extern void 
	$setrpcent
 (int 
__stayopen
) 
__THROW
;

54 extern void 
	$endrpcent
 (void) 
__THROW
;

55 extern struct 
rpcent
 *
	$getrpcbyname
 (const char *
__name
) 
__THROW
;

56 extern struct 
rpcent
 *
	$getrpcbynumber
 (int 
__number
) 
__THROW
;

57 extern struct 
rpcent
 *
	$getrpcent
 (void) 
__THROW
;

59 #ifdef 
__USE_MISC


60 extern int 
	$getrpcbyname_r
 (const char *
__name
, struct 
rpcent
 *
__result_buf
,

61 char *
__buffer
, 
size_t
 
__buflen
,

62 struct 
rpcent
 **
__result
) 
__THROW
;

64 extern int 
	$getrpcbynumber_r
 (int 
__number
, struct 
rpcent
 *
__result_buf
,

65 char *
__buffer
, 
size_t
 
__buflen
,

66 struct 
rpcent
 **
__result
) 
__THROW
;

68 extern int 
	$getrpcent_r
 (struct 
rpcent
 *
__result_buf
, char *
__buffer
,

69 
size_t
 
__buflen
, struct 
rpcent
 **
__result
) 
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

22 #ifndef 
_STDINT_H


23 #define 
	#_STDINT_H
 1

	)

25 #include 
	~<features.h
>

26 #include 
	~<bits/wchar.h
>

27 #include 
	~<bits/wordsize.h
>

34 #ifndef 
__int8_t_defined


35 #define 
	#__int8_t_defined


	)

36 typedef signed char 
	tint8_t
;

37 typedef short int 
	tint16_t
;

38 typedef int 
	tint32_t
;

39 #if 
__WORDSIZE
 == 64

40 typedef long int 
	tint64_t
;

42 
__extension__


43 typedef long long int 
	tint64_t
;

48 typedef unsigned char 
	tuint8_t
;

49 typedef unsigned short int 
	tuint16_t
;

50 #ifndef 
__uint32_t_defined


51 typedef unsigned int 
	tuint32_t
;

52 #define 
	#__uint32_t_defined


	)

54 #if 
__WORDSIZE
 == 64

55 typedef unsigned long int 
	tuint64_t
;

57 
__extension__


58 typedef unsigned long long int 
	tuint64_t
;

65 typedef signed char 
	tint_least8_t
;

66 typedef short int 
	tint_least16_t
;

67 typedef int 
	tint_least32_t
;

68 #if 
__WORDSIZE
 == 64

69 typedef long int 
	tint_least64_t
;

71 
__extension__


72 typedef long long int 
	tint_least64_t
;

76 typedef unsigned char 
	tuint_least8_t
;

77 typedef unsigned short int 
	tuint_least16_t
;

78 typedef unsigned int 
	tuint_least32_t
;

79 #if 
__WORDSIZE
 == 64

80 typedef unsigned long int 
	tuint_least64_t
;

82 
__extension__


83 typedef unsigned long long int 
	tuint_least64_t
;

90 typedef signed char 
	tint_fast8_t
;

91 #if 
__WORDSIZE
 == 64

92 typedef long int 
	tint_fast16_t
;

93 typedef long int 
	tint_fast32_t
;

94 typedef long int 
	tint_fast64_t
;

96 typedef int 
	tint_fast16_t
;

97 typedef int 
	tint_fast32_t
;

98 
__extension__


99 typedef long long int 
	tint_fast64_t
;

103 typedef unsigned char 
	tuint_fast8_t
;

104 #if 
__WORDSIZE
 == 64

105 typedef unsigned long int 
	tuint_fast16_t
;

106 typedef unsigned long int 
	tuint_fast32_t
;

107 typedef unsigned long int 
	tuint_fast64_t
;

109 typedef unsigned int 
	tuint_fast16_t
;

110 typedef unsigned int 
	tuint_fast32_t
;

111 
__extension__


112 typedef unsigned long long int 
	tuint_fast64_t
;

117 #if 
__WORDSIZE
 == 64

118 #ifndef 
__intptr_t_defined


119 typedef long int 
	tintptr_t
;

120 #define 
	#__intptr_t_defined


	)

122 typedef unsigned long int 
	tuintptr_t
;

124 #ifndef 
__intptr_t_defined


125 typedef int 
	tintptr_t
;

126 #define 
	#__intptr_t_defined


	)

128 typedef unsigned int 
	tuintptr_t
;

133 #if 
__WORDSIZE
 == 64

134 typedef long int 
	tintmax_t
;

135 typedef unsigned long int 
	tuintmax_t
;

137 
__extension__


138 typedef long long int 
	tintmax_t
;

139 
__extension__


140 typedef unsigned long long int 
	tuintmax_t
;

144 #if 
__WORDSIZE
 == 64

145 #define 
	#__INT64_C
(
c
) c ## 
L


	)

146 #define 
	#__UINT64_C
(
c
) c ## 
UL


	)

148 #define 
	#__INT64_C
(
c
) c ## 
LL


	)

149 #define 
	#__UINT64_C
(
c
) c ## 
ULL


	)

155 #define 
	#INT8_MIN
 (-128)

	)

156 #define 
	#INT16_MIN
 (-32767-1)

	)

157 #define 
	#INT32_MIN
 (-2147483647-1)

	)

158 #define 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 #define 
	#INT8_MAX
 (127)

	)

161 #define 
	#INT16_MAX
 (32767)

	)

162 #define 
	#INT32_MAX
 (2147483647)

	)

163 #define 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 #define 
	#UINT8_MAX
 (255)

	)

167 #define 
	#UINT16_MAX
 (65535)

	)

168 #define 
	#UINT32_MAX
 (4294967295U)

	)

169 #define 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 #define 
	#INT_LEAST8_MIN
 (-128)

	)

174 #define 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 #define 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 #define 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 #define 
	#INT_LEAST8_MAX
 (127)

	)

179 #define 
	#INT_LEAST16_MAX
 (32767)

	)

180 #define 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 #define 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 #define 
	#UINT_LEAST8_MAX
 (255)

	)

185 #define 
	#UINT_LEAST16_MAX
 (65535)

	)

186 #define 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 #define 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 #define 
	#INT_FAST8_MIN
 (-128)

	)

192 #if 
__WORDSIZE
 == 64

193 #define 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 #define 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 #define 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 #define 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 #define 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 #define 
	#INT_FAST8_MAX
 (127)

	)

202 #if 
__WORDSIZE
 == 64

203 #define 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 #define 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 #define 
	#INT_FAST16_MAX
 (2147483647)

	)

207 #define 
	#INT_FAST32_MAX
 (2147483647)

	)

209 #define 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 #define 
	#UINT_FAST8_MAX
 (255)

	)

213 #if 
__WORDSIZE
 == 64

214 #define 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 #define 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 #define 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 #define 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 #define 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #if 
__WORDSIZE
 == 64

225 #define 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 #define 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 #define 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 #define 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 #define 
	#INTPTR_MAX
 (2147483647)

	)

231 #define 
	#UINTPTR_MAX
 (4294967295U)

	)

236 #define 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 #define 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 #define 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #if 
__WORDSIZE
 == 64

248 #define 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 #define 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 #define 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 #define 
	#PTRDIFF_MAX
 (2147483647)

	)

256 #define 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 #define 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #if 
__WORDSIZE
 == 64

261 #define 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #define 
	#SIZE_MAX
 (4294967295U)

	)

267 #ifndef 
WCHAR_MIN


269 #define 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 #define 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 #define 
	#WINT_MIN
 (0u)

	)

275 #define 
	#WINT_MAX
 (4294967295u)

	)

278 #define 
	#INT8_C
(
c
) 
	)
c

279 #define 
	#INT16_C
(
c
) 
	)
c

280 #define 
	#INT32_C
(
c
) 
	)
c

281 #if 
__WORDSIZE
 == 64

282 #define 
	#INT64_C
(
c
) c ## 
L


	)

284 #define 
	#INT64_C
(
c
) c ## 
LL


	)

288 #define 
	#UINT8_C
(
c
) 
	)
c

289 #define 
	#UINT16_C
(
c
) 
	)
c

290 #define 
	#UINT32_C
(
c
) c ## 
U


	)

291 #if 
__WORDSIZE
 == 64

292 #define 
	#UINT64_C
(
c
) c ## 
UL


	)

294 #define 
	#UINT64_C
(
c
) c ## 
ULL


	)

298 #if 
__WORDSIZE
 == 64

299 #define 
	#INTMAX_C
(
c
) c ## 
L


	)

300 #define 
	#UINTMAX_C
(
c
) c ## 
UL


	)

302 #define 
	#INTMAX_C
(
c
) c ## 
LL


	)

303 #define 
	#UINTMAX_C
(
c
) c ## 
ULL


	)

	@/usr/include/time.h

22 #ifndef 
_TIME_H


24 #if (! 
defined
 
__need_time_t
 && !defined 
__need_clock_t
 && \

25 ! 
defined
 
	g__need_timespec
)

26 #define 
	#_TIME_H
 1

	)

27 #include 
	~<features.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 #define 
	#__need_size_t


	)

36 #define 
	#__need_NULL


	)

37 #include 
	~<stddef.h
>

41 #include 
	~<bits/time.h
>

44 #if !
defined
 
__STRICT_ANSI__
 && !defined 
__USE_XOPEN2K


45 #ifndef 
CLK_TCK


46 #define 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #if !
defined
 
__clock_t_defined
 && (defined 
_TIME_H
 || defined 
__need_clock_t
)

53 #define 
	#__clock_t_defined
 1

	)

55 #include 
	~<bits/types.h
>

57 
__BEGIN_NAMESPACE_STD


59 typedef 
__clock_t
 
	tclock_t
;

60 
	g__END_NAMESPACE_STD


61 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_POSIX
 || defined 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
clock_t
)

66 #undef 
__need_clock_t


68 #if !
defined
 
__time_t_defined
 && (defined 
_TIME_H
 || defined 
__need_time_t
)

69 #define 
	#__time_t_defined
 1

	)

71 #include 
	~<bits/types.h
>

73 
__BEGIN_NAMESPACE_STD


75 typedef 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC
 || defined 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #undef 
__need_time_t


84 #if !
defined
 
__clockid_t_defined
 && \

85 ((
defined
 
_TIME_H
 && defined 
__USE_POSIX199309
) || defined 
__need_clockid_t
)

86 #define 
	#__clockid_t_defined
 1

	)

88 #include 
	~<bits/types.h
>

91 typedef 
__clockid_t
 
	tclockid_t
;

94 #undef 
__clockid_time_t


96 #if !
defined
 
__timer_t_defined
 && \

97 ((
defined
 
_TIME_H
 && defined 
__USE_POSIX199309
) || defined 
__need_timer_t
)

98 #define 
	#__timer_t_defined
 1

	)

100 #include 
	~<bits/types.h
>

103 typedef 
__timer_t
 
	ttimer_t
;

106 #undef 
__need_timer_t


109 #if (!
defined
 
__timespec_defined
 \

110 && ((
defined
 
_TIME_H
 \

111 && (
defined
 
__USE_POSIX199309
 || defined 
__USE_MISC
 \

112 || 
defined
 
__USE_ISOC11
)) \

113 || 
defined
 
__need_timespec
))

114 #define 
	#__timespec_defined
 1

	)

116 #include 
	~<bits/types.h
>

120 struct 
	stimespec


122 
__time_t
 
tv_sec
;

123 
__syscall_slong_t
 
tv_nsec
;

127 #undef 
__need_timespec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 struct 
	stm


135 int 
tm_sec
;

136 int 
tm_min
;

137 int 
tm_hour
;

138 int 
tm_mday
;

139 int 
tm_mon
;

140 int 
tm_year
;

141 int 
tm_wday
;

142 int 
tm_yday
;

143 int 
tm_isdst
;

145 #ifdef 
__USE_BSD


146 long int 
tm_gmtoff
;

147 const char *
tm_zone
;

149 long int 
__tm_gmtoff
;

150 const char *
__tm_zone
;

153 
__END_NAMESPACE_STD


154 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_POSIX
 || defined 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifdef 
__USE_POSIX199309


161 struct 
	sitimerspec


163 struct 
timespec
 
it_interval
;

164 struct 
timespec
 
it_value
;

168 struct 
sigevent
;

172 #ifdef 
__USE_XOPEN2K


173 #ifndef 
__pid_t_defined


174 typedef 
__pid_t
 
	tpid_t
;

175 #define 
	#__pid_t_defined


	)

180 #ifdef 
__USE_ISOC11


182 #define 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 extern 
clock_t
 
	$clock
 (void) 
__THROW
;

192 extern 
time_t
 
	$time
 (
time_t
 *
__timer
) 
__THROW
;

195 extern double 
	$difftime
 (
time_t
 
__time1
, time_t 
__time0
)

196 
__THROW
 
	`__attribute__
 ((
__const__
));

199 extern 
time_t
 
	$mktime
 (struct 
tm
 *
__tp
) 
__THROW
;

205 extern 
size_t
 
	$strftime
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

206 const char *
__restrict
 
__format
,

207 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifdef 
__USE_XOPEN


213 extern char *
	$strptime
 (const char *
__restrict
 
__s
,

214 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
)

215 
__THROW
;

218 #ifdef 
__USE_XOPEN2K8


221 #include 
	~<xlocale.h
>

223 extern 
size_t
 
	$strftime_l
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

224 const char *
__restrict
 
__format
,

225 const struct 
tm
 *
__restrict
 
__tp
,

226 
__locale_t
 
__loc
) 
__THROW
;

229 #ifdef 
__USE_GNU


230 extern char *
	$strptime_l
 (const char *
__restrict
 
__s
,

231 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
,

232 
__locale_t
 
__loc
) 
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 extern struct 
tm
 *
	$gmtime
 (const 
time_t
 *
__timer
) 
__THROW
;

243 extern struct 
tm
 *
	$localtime
 (const 
time_t
 *
__timer
) 
__THROW
;

244 
__END_NAMESPACE_STD


246 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


249 extern struct 
tm
 *
	$gmtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

250 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

254 extern struct 
tm
 *
	$localtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

255 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 extern char *
	$asctime
 (const struct 
tm
 *
__tp
) 
__THROW
;

264 extern char *
	$ctime
 (const 
time_t
 *
__timer
) 
__THROW
;

265 
__END_NAMESPACE_STD


267 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


272 extern char *
	$asctime_r
 (const struct 
tm
 *
__restrict
 
__tp
,

273 char *
__restrict
 
__buf
) 
__THROW
;

276 extern char *
	$ctime_r
 (const 
time_t
 *
__restrict
 
__timer
,

277 char *
__restrict
 
__buf
) 
__THROW
;

282 extern char *
__tzname
[2];

283 extern int 
__daylight
;

284 extern long int 
__timezone
;

287 #ifdef 
__USE_POSIX


289 extern char *
tzname
[2];

293 extern void 
	$tzset
 (void) 
__THROW
;

296 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


297 extern int 
daylight
;

298 extern long int 
timezone
;

301 #ifdef 
__USE_SVID


304 extern int 
	$stime
 (const 
time_t
 *
__when
) 
__THROW
;

310 #define 
	#__isleap
(
year
) \

311 ((
year
) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))

	)

314 #ifdef 
__USE_MISC


319 extern 
time_t
 
	$timegm
 (struct 
tm
 *
__tp
) 
__THROW
;

322 extern 
time_t
 
	$timelocal
 (struct 
tm
 *
__tp
) 
__THROW
;

325 extern int 
	$dysize
 (int 
__year
) 
__THROW
 
	`__attribute__
 ((
__const__
));

329 #ifdef 
__USE_POSIX199309


334 extern int 
	`nanosleep
 (const struct 
timespec
 *
__requested_time
,

335 struct 
timespec
 *
__remaining
);

339 extern int 
	$clock_getres
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__res
) 
__THROW
;

342 extern int 
	$clock_gettime
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__tp
) 
__THROW
;

345 extern int 
	$clock_settime
 (
clockid_t
 
__clock_id
, const struct 
timespec
 *
__tp
)

346 
__THROW
;

348 #ifdef 
__USE_XOPEN2K


353 extern int 
	`clock_nanosleep
 (
clockid_t
 
__clock_id
, int 
__flags
,

354 const struct 
timespec
 *
__req
,

355 struct 
timespec
 *
__rem
);

358 extern int 
	$clock_getcpuclockid
 (
pid_t
 
__pid
, 
clockid_t
 *
__clock_id
) 
__THROW
;

363 extern int 
	$timer_create
 (
clockid_t
 
__clock_id
,

364 struct 
sigevent
 *
__restrict
 
__evp
,

365 
timer_t
 *
__restrict
 
__timerid
) 
__THROW
;

368 extern int 
	$timer_delete
 (
timer_t
 
__timerid
) 
__THROW
;

371 extern int 
	$timer_settime
 (
timer_t
 
__timerid
, int 
__flags
,

372 const struct 
itimerspec
 *
__restrict
 
__value
,

373 struct 
itimerspec
 *
__restrict
 
__ovalue
) 
__THROW
;

376 extern int 
	$timer_gettime
 (
timer_t
 
__timerid
, struct 
itimerspec
 *
__value
)

377 
__THROW
;

380 extern int 
	$timer_getoverrun
 (
timer_t
 
__timerid
) 
__THROW
;

384 #ifdef 
__USE_ISOC11


386 extern int 
	$timespec_get
 (struct 
timespec
 *
__ts
, int 
__base
)

387 
__THROW
 
	`__nonnull
 ((1));

391 #ifdef 
__USE_XOPEN_EXTENDED


403 extern int 
getdate_err
;

412 extern struct 
tm
 *
	`getdate
 (const char *
__string
);

415 #ifdef 
__USE_GNU


426 extern int 
	`getdate_r
 (const char *
__restrict
 
__string
,

427 struct 
tm
 *
__restrict
 
__resbufp
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #ifndef 
_XLOCALE_H


21 #define 
	#_XLOCALE_H
 1

	)

27 typedef struct 
	s__locale_struct


30 struct 
__locale_data
 *
	m__locales
[13];

33 const unsigned short int *
	m__ctype_b
;

34 const int *
	m__ctype_tolower
;

35 const int *
	m__ctype_toupper
;

38 const char *
	m__names
[13];

39 } *
	t__locale_t
;

42 typedef 
__locale_t
 
	tlocale_t
;

	@/usr/include/_G_config.h

4 #ifndef 
_G_config_h


5 #define 
	#_G_config_h
 1

	)

9 #include 
	~<bits/types.h
>

10 #define 
	#__need_size_t


	)

11 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


12 #define 
	#__need_wchar_t


	)

14 #define 
	#__need_NULL


	)

15 #include 
	~<stddef.h
>

16 #define 
	#__need_mbstate_t


	)

17 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


18 #define 
	#__need_wint_t


	)

20 #include 
	~<wchar.h
>

23 
__off_t
 
	m__pos
;

24 
__mbstate_t
 
	m__state
;

25 } 
	t_G_fpos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mbstate_t
 
	m__state
;

30 } 
	t_G_fpos64_t
;

31 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


32 #include 
	~<gconv.h
>

35 struct 
__gconv_info
 
	m__cd
;

38 struct 
__gconv_info
 
	m__cd
;

39 struct 
__gconv_step_data
 
	m__data
;

40 } 
	m__combined
;

41 } 
	t_G_iconv_t
;

46 #define 
	#_G_va_list
 
__gnuc_va_list


	)

48 #define 
	#_G_HAVE_MMAP
 1

	)

49 #define 
	#_G_HAVE_MREMAP
 1

	)

51 #define 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 #define 
	#_G_HAVE_ST_BLKSIZE
 
	`defined
 (
_STATBUF_ST_BLKSIZE
)

	)

56 #define 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #ifndef 
_CTYPE_H


23 #define 
	#_CTYPE_H
 1

	)

25 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 
	g__BEGIN_DECLS


30 #ifndef 
_ISbit


39 #include 
	~<endian.h
>

40 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


41 #define 
	#_ISbit
(
bit
) (1 << (bit))

	)

43 #define 
	#_ISbit
(
bit
) ((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))

	)

48 
	m_ISupper
 = 
_ISbit
 (0),

49 
	m_ISlower
 = 
_ISbit
 (1),

50 
	m_ISalpha
 = 
_ISbit
 (2),

51 
	m_ISdigit
 = 
_ISbit
 (3),

52 
	m_ISxdigit
 = 
_ISbit
 (4),

53 
	m_ISspace
 = 
_ISbit
 (5),

54 
	m_ISprint
 = 
_ISbit
 (6),

55 
	m_ISgraph
 = 
_ISbit
 (7),

56 
	m_ISblank
 = 
_ISbit
 (8),

57 
	m_IScntrl
 = 
_ISbit
 (9),

58 
	m_ISpunct
 = 
_ISbit
 (10),

59 
	m_ISalnum
 = 
_ISbit
 (11)

79 extern const unsigned short int **
	$__ctype_b_loc
 (void)

80 
__THROW
 
	`__attribute__
 ((
__const__
));

81 extern const 
__int32_t
 **
	$__ctype_tolower_loc
 (void)

82 
__THROW
 
	`__attribute__
 ((
__const__
));

83 extern const 
__int32_t
 **
	$__ctype_toupper_loc
 (void)

84 
__THROW
 
	`__attribute__
 ((
__const__
));

87 #ifndef 
__cplusplus


88 #define 
	#__isctype
(
c
, 
type
) \

89 ((*
	`__ctype_b_loc
 ())[(int) (
c
)] & (unsigned short int) 
type
)

	)

90 #elif 
defined
 
__USE_EXTERN_INLINES


91 #define 
	#__isctype_f
(
type
) \

92 
__extern_inline
 int \

93 
is
##
	`type
 (int 
__c
) 
__THROW
 \

95 return (*
	`__ctype_b_loc
 ())[(int) (
__c
)] & (unsigned short int) 
_IS
##
type
; \

96 
	}

	)
}

99 #define 
	#__isascii
(
c
) (((c) & ~0x7f) == 0)

	)

100 #define 
	#__toascii
(
c
) ((c) & 0x7f)

	)

102 #define 
	#__exctype
(
name
) extern int 
	`name
 (int) 
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__exctype
 (
isalnum
);

111 
__exctype
 (
isalpha
);

112 
__exctype
 (
iscntrl
);

113 
__exctype
 (
isdigit
);

114 
__exctype
 (
islower
);

115 
__exctype
 (
isgraph
);

116 
__exctype
 (
isprint
);

117 
__exctype
 (
ispunct
);

118 
__exctype
 (
isspace
);

119 
__exctype
 (
isupper
);

120 
__exctype
 (
isxdigit
);

124 extern int 
	$tolower
 (int 
__c
) 
__THROW
;

127 extern int 
	$toupper
 (int 
__c
) 
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__exctype
 (
isblank
);

138 
__END_NAMESPACE_C99


141 #ifdef 
__USE_GNU


143 extern int 
	$isctype
 (int 
__c
, int 
__mask
) 
__THROW
;

146 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


150 extern int 
	$isascii
 (int 
__c
) 
__THROW
;

154 extern int 
	$toascii
 (int 
__c
) 
__THROW
;

158 
	`__exctype
 (
_toupper
);

159 
	`__exctype
 (
_tolower
);

163 #define 
	#__tobody
(
c
, 
f
, 
a
, 
args
) \

164 (
__extension__
 \

165 ({ int 
__res
; \

166 if (sizeof (
c
) > 1) \

168 if (
	`__builtin_constant_p
 (
c
)) \

170 int 
__c
 = (
c
); \

171 
__res
 = 
__c
 < -128 || __c > 255 ? __c : (
a
)[__c]; \

174 
__res
 = 
f
 
args
; \

177 
__res
 = (
a
)[(int) (
c
)]; \

178 
__res
; 
	}
}))

	)

180 #if !
defined
 
__NO_CTYPE


181 #ifdef 
__isctype_f


182 
	$__isctype_f
 (
alnum
)

183 
	$__isctype_f
 (
alpha
)

184 
	$__isctype_f
 (
cntrl
)

185 
	$__isctype_f
 (
digit
)

186 
	$__isctype_f
 (
lower
)

187 
	$__isctype_f
 (
graph
)

188 
	$__isctype_f
 (
print
)

189 
	$__isctype_f
 (
punct
)

190 
	$__isctype_f
 (
space
)

191 
	$__isctype_f
 (
upper
)

192 
	$__isctype_f
 (
xdigit
)

193 #ifdef 
__USE_ISOC99


194 
	$__isctype_f
 (
blank
)

196 #elif 
defined
 
__isctype


197 #define 
	#isalnum
(
c
) 
	`__isctype
((c), 
_ISalnum
)

	)

198 #define 
	#isalpha
(
c
) 
	`__isctype
((c), 
_ISalpha
)

	)

199 #define 
	#iscntrl
(
c
) 
	`__isctype
((c), 
_IScntrl
)

	)

200 #define 
	#isdigit
(
c
) 
	`__isctype
((c), 
_ISdigit
)

	)

201 #define 
	#islower
(
c
) 
	`__isctype
((c), 
_ISlower
)

	)

202 #define 
	#isgraph
(
c
) 
	`__isctype
((c), 
_ISgraph
)

	)

203 #define 
	#isprint
(
c
) 
	`__isctype
((c), 
_ISprint
)

	)

204 #define 
	#ispunct
(
c
) 
	`__isctype
((c), 
_ISpunct
)

	)

205 #define 
	#isspace
(
c
) 
	`__isctype
((c), 
_ISspace
)

	)

206 #define 
	#isupper
(
c
) 
	`__isctype
((c), 
_ISupper
)

	)

207 #define 
	#isxdigit
(
c
) 
	`__isctype
((c), 
_ISxdigit
)

	)

208 #ifdef 
__USE_ISOC99


209 #define 
	#isblank
(
c
) 
	`__isctype
((c), 
_ISblank
)

	)

213 #ifdef 
__USE_EXTERN_INLINES


214 
__extern_inline
 int

215 
	`__NTH
 (
	$tolower
 (int 
__c
))

217 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_tolower_loc
 ())[__c] : __c;

218 
	}
}

220 
__extern_inline
 int

221 
__NTH
 (
	$toupper
 (int 
__c
))

223 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_toupper_loc
 ())[__c] : __c;

224 
	}
}

227 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


228 #define 
	#tolower
(
c
) 
	`__tobody
 (c, 
tolower
, *
	`__ctype_tolower_loc
 (), (c))

	)

229 #define 
	#toupper
(
c
) 
	`__tobody
 (c, 
toupper
, *
	`__ctype_toupper_loc
 (), (c))

	)

232 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


233 #define 
	#isascii
(
c
) 
	`__isascii
 (c)

	)

234 #define 
	#toascii
(
c
) 
	`__toascii
 (c)

	)

236 #define 
	#_tolower
(
c
) ((int) (*
	`__ctype_tolower_loc
 ())[(int) (c)])

	)

237 #define 
	#_toupper
(
c
) ((int) (*
	`__ctype_toupper_loc
 ())[(int) (c)])

	)

243 #ifdef 
__USE_XOPEN2K8


257 #include 
	~<xlocale.h
>

261 #define 
	#__isctype_l
(
c
, 
type
, 
locale
) \

262 ((
locale
)->
__ctype_b
[(int) (
c
)] & (unsigned short int) 
type
)

	)

264 #define 
	#__exctype_l
(
name
) \

265 extern int 
	`name
 (int, 
__locale_t
) 
__THROW


	)

271 
__exctype_l
 (
isalnum_l
);

272 
__exctype_l
 (
isalpha_l
);

273 
__exctype_l
 (
iscntrl_l
);

274 
__exctype_l
 (
isdigit_l
);

275 
__exctype_l
 (
islower_l
);

276 
__exctype_l
 (
isgraph_l
);

277 
__exctype_l
 (
isprint_l
);

278 
__exctype_l
 (
ispunct_l
);

279 
__exctype_l
 (
isspace_l
);

280 
__exctype_l
 (
isupper_l
);

281 
__exctype_l
 (
isxdigit_l
);

283 
__exctype_l
 (
isblank_l
);

287 extern int 
	$__tolower_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

288 extern int 
	$tolower_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

291 extern int 
	$__toupper_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

292 extern int 
	$toupper_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

294 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


295 #define 
	#__tolower_l
(
c
, 
locale
) \

296 
	`__tobody
 (
c
, 
__tolower_l
, (
locale
)->
__ctype_tolower
, (c, locale))

	)

297 #define 
	#__toupper_l
(
c
, 
locale
) \

298 
	`__tobody
 (
c
, 
__toupper_l
, (
locale
)->
__ctype_toupper
, (c, locale))

	)

299 #define 
	#tolower_l
(
c
, 
locale
) 
	`__tolower_l
 ((c), (locale))

	)

300 #define 
	#toupper_l
(
c
, 
locale
) 
	`__toupper_l
 ((c), (locale))

	)

304 #ifndef 
__NO_CTYPE


305 #define 
	#__isalnum_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalnum
, (l))

	)

306 #define 
	#__isalpha_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalpha
, (l))

	)

307 #define 
	#__iscntrl_l
(
c
,
l
) 
	`__isctype_l
((c), 
_IScntrl
, (l))

	)

308 #define 
	#__isdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISdigit
, (l))

	)

309 #define 
	#__islower_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISlower
, (l))

	)

310 #define 
	#__isgraph_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISgraph
, (l))

	)

311 #define 
	#__isprint_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISprint
, (l))

	)

312 #define 
	#__ispunct_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISpunct
, (l))

	)

313 #define 
	#__isspace_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISspace
, (l))

	)

314 #define 
	#__isupper_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISupper
, (l))

	)

315 #define 
	#__isxdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISxdigit
, (l))

	)

317 #define 
	#__isblank_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISblank
, (l))

	)

319 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC


320 #define 
	#__isascii_l
(
c
,
l
) ((l), 
	`__isascii
 (c))

	)

321 #define 
	#__toascii_l
(
c
,
l
) ((l), 
	`__toascii
 (c))

	)

324 #define 
	#isalnum_l
(
c
,
l
) 
	`__isalnum_l
 ((c), (l))

	)

325 #define 
	#isalpha_l
(
c
,
l
) 
	`__isalpha_l
 ((c), (l))

	)

326 #define 
	#iscntrl_l
(
c
,
l
) 
	`__iscntrl_l
 ((c), (l))

	)

327 #define 
	#isdigit_l
(
c
,
l
) 
	`__isdigit_l
 ((c), (l))

	)

328 #define 
	#islower_l
(
c
,
l
) 
	`__islower_l
 ((c), (l))

	)

329 #define 
	#isgraph_l
(
c
,
l
) 
	`__isgraph_l
 ((c), (l))

	)

330 #define 
	#isprint_l
(
c
,
l
) 
	`__isprint_l
 ((c), (l))

	)

331 #define 
	#ispunct_l
(
c
,
l
) 
	`__ispunct_l
 ((c), (l))

	)

332 #define 
	#isspace_l
(
c
,
l
) 
	`__isspace_l
 ((c), (l))

	)

333 #define 
	#isupper_l
(
c
,
l
) 
	`__isupper_l
 ((c), (l))

	)

334 #define 
	#isxdigit_l
(
c
,
l
) 
	`__isxdigit_l
 ((c), (l))

	)

336 #define 
	#isblank_l
(
c
,
l
) 
	`__isblank_l
 ((c), (l))

	)

338 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC


339 #define 
	#isascii_l
(
c
,
l
) 
	`__isascii_l
 ((c), (l))

	)

340 #define 
	#toascii_l
(
c
,
l
) 
	`__toascii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #ifndef 
_STDC_PREDEF_H


19 #define 
	#_STDC_PREDEF_H
 1

	)

36 #ifdef 
__GCC_IEC_559


37 #if 
__GCC_IEC_559
 > 0

38 #define 
	#__STDC_IEC_559__
 1

	)

41 #define 
	#__STDC_IEC_559__
 1

	)

44 #ifdef 
__GCC_IEC_559_COMPLEX


45 #if 
__GCC_IEC_559_COMPLEX
 > 0

46 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 #define 
	#__STDC_ISO_10646__
 201103L

	)

57 #define 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #ifndef 
_GCONV_H


23 #define 
	#_GCONV_H
 1

	)

25 #include 
	~<features.h
>

26 #define 
	#__need_mbstate_t


	)

27 #define 
	#__need_wint_t


	)

28 #include 
	~<wchar.h
>

29 #define 
	#__need_size_t


	)

30 #define 
	#__need_wchar_t


	)

31 #include 
	~<stddef.h
>

34 #define 
	#__UNKNOWN_10646_CHAR
 ((
wchar_t
) 0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 struct 
	g__gconv_step
;

65 struct 
	g__gconv_step_data
;

66 struct 
	g__gconv_loaded_object
;

67 struct 
	g__gconv_trans_data
;

71 typedef int (*
	t__gconv_fct
) (struct 
	t__gconv_step
 *, struct 
	t__gconv_step_data
 *,

73 unsigned char **, 
	tsize_t
 *, int, int);

76 typedef 
	$wint_t
 (*
	t__gconv_btowc_fct
) (struct 
	t__gconv_step
 *, unsigned char);

79 typedef int (*
	t__gconv_init_fct
) (struct 
	t__gconv_step
 *);

80 typedef void (*
	t__gconv_end_fct
) (struct 
	t__gconv_step
 *);

84 typedef int (*
	t__gconv_trans_fct
) (struct 
	t__gconv_step
 *,

85 struct 
	t__gconv_step_data
 *, void *,

89 
	tsize_t
 *);

92 typedef int (*
	t__gconv_trans_context_fct
) (void *, const unsigned char *,

97 typedef int (*
	t__gconv_trans_query_fct
) (const char *, const char ***,

98 
	tsize_t
 *);

101 typedef int (*
	t__gconv_trans_init_fct
) (void **, const char *);

102 typedef void (*
	t__gconv_trans_end_fct
) (void *);

104 struct 
	s__gconv_trans_data


107 
__gconv_trans_fct
 
__trans_fct
;

108 
__gconv_trans_context_fct
 
__trans_context_fct
;

109 
__gconv_trans_end_fct
 
__trans_end_fct
;

110 void *
__data
;

111 struct 
__gconv_trans_data
 *
__next
;

116 struct 
	s__gconv_step


118 struct 
__gconv_loaded_object
 *
__shlib_handle
;

119 const char *
__modname
;

121 int 
__counter
;

123 char *
__from_name
;

124 char *
__to_name
;

126 
__gconv_fct
 
__fct
;

127 
__gconv_btowc_fct
 
__btowc_fct
;

128 
__gconv_init_fct
 
__init_fct
;

129 
__gconv_end_fct
 
__end_fct
;

133 int 
__min_needed_from
;

134 int 
__max_needed_from
;

135 int 
__min_needed_to
;

136 int 
__max_needed_to
;

139 int 
__stateful
;

141 void *
__data
;

146 struct 
	s__gconv_step_data


148 unsigned char *
__outbuf
;

149 unsigned char *
__outbufend
;

153 int 
__flags
;

157 int 
__invocation_counter
;

161 int 
__internal_use
;

163 
__mbstate_t
 *
__statep
;

164 
__mbstate_t
 
__state
;

168 struct 
__gconv_trans_data
 *
__trans
;

173 typedef struct 
	s__gconv_info


175 
size_t
 
__nsteps
;

176 struct 
__gconv_step
 *
__steps
;

177 
__extension__
 struct 
__gconv_step_data
 
__data
 
__flexarr
;

178 } *
	t__gconv_t
;

	@/usr/include/wchar.h

23 #ifndef 
_WCHAR_H


25 #if !
defined
 
__need_mbstate_t
 && !defined 
__need_wint_t


26 #define 
	#_WCHAR_H
 1

	)

27 #include 
	~<features.h
>

30 #ifdef 
_WCHAR_H


32 #define 
	#__need___FILE


	)

33 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


34 #define 
	#__need_FILE


	)

36 #include 
	~<stdio.h
>

38 #define 
	#__need___va_list


	)

39 #include 
	~<stdarg.h
>

41 #include 
	~<bits/wchar.h
>

44 #define 
	#__need_size_t


	)

45 #define 
	#__need_wchar_t


	)

46 #define 
	#__need_NULL


	)

48 #if 
defined
 
_WCHAR_H
 || defined 
__need_wint_t
 || !defined 
__WINT_TYPE__


49 #undef 
__need_wint_t


50 #define 
	#__need_wint_t


	)

51 #include 
	~<stddef.h
>

55 #ifndef 
_WINT_T


60 #define 
	#_WINT_T


	)

61 typedef unsigned int 
	twint_t
;

65 #if 
defined
 
__cplusplus
 && defined 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
defined
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 typedef 
__WINT_TYPE__
 
	twint_t
;

69 
	g__END_NAMESPACE_STD


74 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

75 #define 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #if (
defined
 
_WCHAR_H
 || defined 
__need_mbstate_t
) && !defined 
____mbstate_t_defined


80 #define 
	#____mbstate_t_defined
 1

	)

84 int 
	m__count
;

87 #ifdef 
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wint_t
 
	m__wch
;

92 char 
	m__wchb
[4];

93 } 
	m__value
;

94 } 
	t__mbstate_t
;

96 #undef 
__need_mbstate_t


101 #ifdef 
_WCHAR_H


103 #ifndef 
__mbstate_t_defined


104 
__BEGIN_NAMESPACE_C99


106 typedef 
__mbstate_t
 
	tmbstate_t
;

107 
	g__END_NAMESPACE_C99


108 #define 
	#__mbstate_t_defined
 1

	)

111 #ifdef 
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mbstate_t
)

115 #ifndef 
WCHAR_MIN


117 #define 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 #define 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #ifndef 
WEOF


122 #define 
	#WEOF
 (0xffffffffu)

	)

127 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_UNIX98


128 #include 
	~<wctype.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 struct 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 extern 
wchar_t
 *
	$wcscpy
 (
wchar_t
 *
__restrict
 
__dest
,

148 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

150 extern 
wchar_t
 *
	$wcsncpy
 (
wchar_t
 *
__restrict
 
__dest
,

151 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

152 
__THROW
;

155 extern 
wchar_t
 *
	$wcscat
 (
wchar_t
 *
__restrict
 
__dest
,

156 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

158 extern 
wchar_t
 *
	$wcsncat
 (
wchar_t
 *
__restrict
 
__dest
,

159 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

160 
__THROW
;

163 extern int 
	$wcscmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
)

164 
__THROW
 
__attribute_pure__
;

166 extern int 
	$wcsncmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__attribute_pure__
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_XOPEN2K8


172 extern int 
	$wcscasecmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
) 
__THROW
;

175 extern int 
	$wcsncasecmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

176 
size_t
 
__n
) 
__THROW
;

180 #include 
	~<xlocale.h
>

182 extern int 
	$wcscasecmp_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

183 
__locale_t
 
__loc
) 
__THROW
;

185 extern int 
	$wcsncasecmp_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

186 
size_t
 
__n
, 
__locale_t
 
__loc
) 
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 extern int 
	$wcscoll
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
) 
__THROW
;

196 extern 
size_t
 
	$wcsxfrm
 (
wchar_t
 *
__restrict
 
__s1
,

197 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
) 
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifdef 
__USE_XOPEN2K8


206 extern int 
	$wcscoll_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

207 
__locale_t
 
__loc
) 
__THROW
;

212 extern 
size_t
 
	$wcsxfrm_l
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

213 
size_t
 
__n
, 
__locale_t
 
__loc
) 
__THROW
;

216 extern 
wchar_t
 *
	$wcsdup
 (const 
wchar_t
 *
__s
) 
__THROW
 
__attribute_malloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 extern "C++" 
wchar_t
 *
	$wcschr
 (
wchar_t
 *
__wcs
, wchar_t 
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr") 
__attribute_pure__
;

224 extern "C++" const 
wchar_t
 *
	$wcschr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr") 
__attribute_pure__
;

227 extern 
wchar_t
 *
	$wcschr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

228 
__THROW
 
__attribute_pure__
;

231 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 extern "C++" 
wchar_t
 *
	$wcsrchr
 (
wchar_t
 *
__wcs
, wchar_t 
__wc
)

233 
__THROW
 
	`__asm
 ("wcsrchr") 
__attribute_pure__
;

234 extern "C++" const 
wchar_t
 *
	$wcsrchr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

235 
__THROW
 
	`__asm
 ("wcsrchr") 
__attribute_pure__
;

237 extern 
wchar_t
 *
	$wcsrchr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

238 
__THROW
 
__attribute_pure__
;

240 
__END_NAMESPACE_STD


242 #ifdef 
__USE_GNU


245 extern 
wchar_t
 *
	$wcschrnul
 (const 
wchar_t
 *
__s
, wchar_t 
__wc
)

246 
__THROW
 
__attribute_pure__
;

249 
__BEGIN_NAMESPACE_STD


252 extern 
size_t
 
	$wcscspn
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__reject
)

253 
__THROW
 
__attribute_pure__
;

256 extern 
size_t
 
	$wcsspn
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

257 
__THROW
 
__attribute_pure__
;

259 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 extern "C++" 
wchar_t
 *
	$wcspbrk
 (
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

261 
__THROW
 
	`__asm
 ("wcspbrk") 
__attribute_pure__
;

262 extern "C++" const 
wchar_t
 *
	$wcspbrk
 (const 
wchar_t
 *
__wcs
,

263 const 
wchar_t
 *
__accept
)

264 
__THROW
 
	`__asm
 ("wcspbrk") 
__attribute_pure__
;

266 extern 
wchar_t
 *
	$wcspbrk
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

267 
__THROW
 
__attribute_pure__
;

270 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 extern "C++" 
wchar_t
 *
	$wcsstr
 (
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

272 
__THROW
 
	`__asm
 ("wcsstr") 
__attribute_pure__
;

273 extern "C++" const 
wchar_t
 *
	$wcsstr
 (const 
wchar_t
 *
__haystack
,

274 const 
wchar_t
 *
__needle
)

275 
__THROW
 
	`__asm
 ("wcsstr") 
__attribute_pure__
;

277 extern 
wchar_t
 *
	$wcsstr
 (const 
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

278 
__THROW
 
__attribute_pure__
;

282 extern 
wchar_t
 *
	$wcstok
 (
wchar_t
 *
__restrict
 
__s
,

283 const 
wchar_t
 *
__restrict
 
__delim
,

284 
wchar_t
 **
__restrict
 
__ptr
) 
__THROW
;

287 extern 
size_t
 
	$wcslen
 (const 
wchar_t
 *
__s
) 
__THROW
 
__attribute_pure__
;

288 
__END_NAMESPACE_STD


290 #ifdef 
__USE_XOPEN


292 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 extern "C++" 
wchar_t
 *
	$wcswcs
 (
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

294 
__THROW
 
	`__asm
 ("wcswcs") 
__attribute_pure__
;

295 extern "C++" const 
wchar_t
 *
	$wcswcs
 (const 
wchar_t
 *
__haystack
,

296 const 
wchar_t
 *
__needle
)

297 
__THROW
 
	`__asm
 ("wcswcs") 
__attribute_pure__
;

299 extern 
wchar_t
 *
	$wcswcs
 (const 
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

300 
__THROW
 
__attribute_pure__
;

304 #ifdef 
__USE_XOPEN2K8


306 extern 
size_t
 
	$wcsnlen
 (const 
wchar_t
 *
__s
, 
size_t
 
__maxlen
)

307 
__THROW
 
__attribute_pure__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 extern "C++" 
wchar_t
 *
	$wmemchr
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr") 
__attribute_pure__
;

316 extern "C++" const 
wchar_t
 *
	$wmemchr
 (const 
wchar_t
 *
__s
, wchar_t 
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr") 
__attribute_pure__
;

320 extern 
wchar_t
 *
	$wmemchr
 (const 
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
)

321 
__THROW
 
__attribute_pure__
;

325 extern int 
	$wmemcmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__attribute_pure__
;

329 extern 
wchar_t
 *
	$wmemcpy
 (
wchar_t
 *
__restrict
 
__s1
,

330 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
) 
__THROW
;

334 extern 
wchar_t
 *
	$wmemmove
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 extern 
wchar_t
 *
	$wmemset
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
) 
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_GNU


344 extern 
wchar_t
 *
	$wmempcpy
 (
wchar_t
 *
__restrict
 
__s1
,

345 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 extern 
wint_t
 
	$btowc
 (int 
__c
) 
__THROW
;

357 extern int 
	$wctob
 (
wint_t
 
__c
) 
__THROW
;

361 extern int 
	$mbsinit
 (const 
mbstate_t
 *
__ps
) 
__THROW
 
__attribute_pure__
;

365 extern 
size_t
 
	$mbrtowc
 (
wchar_t
 *
__restrict
 
__pwc
,

366 const char *
__restrict
 
__s
, 
size_t
 
__n
,

367 
mbstate_t
 *
__restrict
 
__p
) 
__THROW
;

370 extern 
size_t
 
	$wcrtomb
 (char *
__restrict
 
__s
, 
wchar_t
 
__wc
,

371 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

374 extern 
size_t
 
	$__mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

375 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

376 extern 
size_t
 
	$mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

377 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifdef 
__USE_EXTERN_INLINES


386 extern 
wint_t
 
	$__btowc_alias
 (int 
__c
) 
	`__asm
 ("btowc");

387 
__extern_inline
 
wint_t


388 
	`__NTH
 (
	$btowc
 (int 
__c
))

389 { return (
	`__builtin_constant_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wint_t
) 
__c
 : 
	`__btowc_alias
 (__c)); 
	}
}

392 extern int 
	$__wctob_alias
 (
wint_t
 
__c
) 
	`__asm
 ("wctob");

393 
__extern_inline
 int

394 
	`__NTH
 (
	$wctob
 (
wint_t
 
__wc
))

395 { return (
	`__builtin_constant_p
 (
__wc
) && __wc >= 
L
'\0' && __wc <= L'\x7f'

396 ? (int) 
__wc
 : 
	`__wctob_alias
 (__wc)); 
	}
}

398 
__extern_inline
 
size_t


399 
__NTH
 (
	$mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

400 
mbstate_t
 *
__restrict
 
__ps
))

401 { return (
__ps
 != 
NULL


402 ? 
	`mbrtowc
 (
NULL
, 
__s
, 
__n
, 
__ps
) : 
	`__mbrlen
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 extern 
size_t
 
	$mbsrtowcs
 (
wchar_t
 *
__restrict
 
__dst
,

409 const char **
__restrict
 
__src
, 
size_t
 
__len
,

410 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

414 extern 
size_t
 
	$wcsrtombs
 (char *
__restrict
 
__dst
,

415 const 
wchar_t
 **
__restrict
 
__src
, 
size_t
 
__len
,

416 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 extern 
size_t
 
	$mbsnrtowcs
 (
wchar_t
 *
__restrict
 
__dst
,

424 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

425 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

429 extern 
size_t
 
	$wcsnrtombs
 (char *
__restrict
 
__dst
,

430 const 
wchar_t
 **
__restrict
 
__src
,

431 
size_t
 
__nwc
, size_t 
__len
,

432 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

437 #ifdef 
__USE_XOPEN


439 extern int 
	$wcwidth
 (
wchar_t
 
__c
) 
__THROW
;

443 extern int 
	$wcswidth
 (const 
wchar_t
 *
__s
, 
size_t
 
__n
) 
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 extern double 
	$wcstod
 (const 
wchar_t
 *
__restrict
 
__nptr
,

451 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifdef 
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 extern float 
	$wcstof
 (const 
wchar_t
 *
__restrict
 
__nptr
,

458 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

459 extern long double 
	$wcstold
 (const 
wchar_t
 *
__restrict
 
__nptr
,

460 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 extern long int 
	$wcstol
 (const 
wchar_t
 *
__restrict
 
__nptr
,

469 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
) 
__THROW
;

473 extern unsigned long int 
	$wcstoul
 (const 
wchar_t
 *
__restrict
 
__nptr
,

474 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifdef 
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__extension__


483 extern long long int 
	$wcstoll
 (const 
wchar_t
 *
__restrict
 
__nptr
,

484 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

485 
__THROW
;

489 
__extension__


490 extern unsigned long long int 
	$wcstoull
 (const 
wchar_t
 *
__restrict
 
__nptr
,

491 
wchar_t
 **
__restrict
 
__endptr
,

492 int 
__base
) 
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifdef 
__USE_GNU


499 
__extension__


500 extern long long int 
	$wcstoq
 (const 
wchar_t
 *
__restrict
 
__nptr
,

501 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

502 
__THROW
;

506 
__extension__


507 extern unsigned long long int 
	$wcstouq
 (const 
wchar_t
 *
__restrict
 
__nptr
,

508 
wchar_t
 **
__restrict
 
__endptr
,

509 int 
__base
) 
__THROW
;

512 #ifdef 
__USE_GNU


526 #include 
	~<xlocale.h
>

530 extern long int 
	$wcstol_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

531 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
,

532 
__locale_t
 
__loc
) 
__THROW
;

534 extern unsigned long int 
	$wcstoul_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

535 
wchar_t
 **
__restrict
 
__endptr
,

536 int 
__base
, 
__locale_t
 
__loc
) 
__THROW
;

538 
__extension__


539 extern long long int 
	$wcstoll_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

540 
wchar_t
 **
__restrict
 
__endptr
,

541 int 
__base
, 
__locale_t
 
__loc
) 
__THROW
;

543 
__extension__


544 extern unsigned long long int 
	$wcstoull_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

545 
wchar_t
 **
__restrict
 
__endptr
,

546 int 
__base
, 
__locale_t
 
__loc
)

547 
__THROW
;

549 extern double 
	$wcstod_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

550 
wchar_t
 **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

551 
__THROW
;

553 extern float 
	$wcstof_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

554 
wchar_t
 **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

555 
__THROW
;

557 extern long double 
	$wcstold_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

558 
wchar_t
 **
__restrict
 
__endptr
,

559 
__locale_t
 
__loc
) 
__THROW
;

563 #ifdef 
__USE_XOPEN2K8


566 extern 
wchar_t
 *
	$wcpcpy
 (
wchar_t
 *
__restrict
 
__dest
,

567 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

571 extern 
wchar_t
 *
	$wcpncpy
 (
wchar_t
 *
__restrict
 
__dest
,

572 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

573 
__THROW
;

580 extern 
__FILE
 *
	$open_wmemstream
 (
wchar_t
 **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
;

583 #if 
defined
 
__USE_ISOC95
 || defined 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 extern int 
	$fwide
 (
__FILE
 *
__fp
, int 
__mode
) 
__THROW
;

594 extern int 
	`fwprintf
 (
__FILE
 *
__restrict
 
__stream
,

595 const 
wchar_t
 *
__restrict
 
__format
, ...)

601 extern int 
	`wprintf
 (const 
wchar_t
 *
__restrict
 
__format
, ...)

604 extern int 
	$swprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

605 const 
wchar_t
 *
__restrict
 
__format
, ...)

606 
__THROW
 ;

612 extern int 
	`vfwprintf
 (
__FILE
 *
__restrict
 
__s
,

613 const 
wchar_t
 *
__restrict
 
__format
,

614 
__gnuc_va_list
 
__arg
)

620 extern int 
	`vwprintf
 (const 
wchar_t
 *
__restrict
 
__format
,

621 
__gnuc_va_list
 
__arg
)

625 extern int 
	$vswprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

626 const 
wchar_t
 *
__restrict
 
__format
,

627 
__gnuc_va_list
 
__arg
)

628 
__THROW
 ;

635 extern int 
	`fwscanf
 (
__FILE
 *
__restrict
 
__stream
,

636 const 
wchar_t
 *
__restrict
 
__format
, ...)

642 extern int 
	`wscanf
 (const 
wchar_t
 *
__restrict
 
__format
, ...)

645 extern int 
	$swscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

646 const 
wchar_t
 *
__restrict
 
__format
, ...)

647 
__THROW
 ;

649 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

650 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

651 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

652 #ifdef 
__REDIRECT


656 extern int 
	`__REDIRECT
 (
fwscanf
, (
__FILE
 *
__restrict
 
__stream
,

657 const 
wchar_t
 *
__restrict
 
__format
, ...),

658 
__isoc99_fwscanf
)

660 extern int 
	`__REDIRECT
 (
wscanf
, (const 
wchar_t
 *
__restrict
 
__format
, ...),

661 
__isoc99_wscanf
)

663 extern int 
	`__REDIRECT_NTH
 (
swscanf
, (const 
wchar_t
 *
__restrict
 
__s
,

664 const 
wchar_t
 *
__restrict
 
__format
,

665 ...), 
__isoc99_swscanf
)

668 extern int 
	`__isoc99_fwscanf
 (
__FILE
 *
__restrict
 
__stream
,

669 const 
wchar_t
 *
__restrict
 
__format
, ...);

670 extern int 
	`__isoc99_wscanf
 (const 
wchar_t
 *
__restrict
 
__format
, ...);

671 extern int 
	$__isoc99_swscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

672 const 
wchar_t
 *
__restrict
 
__format
, ...)

673 
__THROW
;

674 #define 
	#fwscanf
 
__isoc99_fwscanf


	)

675 #define 
	#wscanf
 
__isoc99_wscanf


	)

676 #define 
	#swscanf
 
__isoc99_swscanf


	)

680 
__END_NAMESPACE_STD


683 #ifdef 
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 extern int 
	`vfwscanf
 (
__FILE
 *
__restrict
 
__s
,

690 const 
wchar_t
 *
__restrict
 
__format
,

691 
__gnuc_va_list
 
__arg
)

697 extern int 
	`vwscanf
 (const 
wchar_t
 *
__restrict
 
__format
,

698 
__gnuc_va_list
 
__arg
)

701 extern int 
	$vswscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

702 const 
wchar_t
 *
__restrict
 
__format
,

703 
__gnuc_va_list
 
__arg
)

704 
__THROW
 ;

706 #if !
defined
 
__USE_GNU
 \

707 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

708 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

709 #ifdef 
__REDIRECT


710 extern int 
	`__REDIRECT
 (
vfwscanf
, (
__FILE
 *
__restrict
 
__s
,

711 const 
wchar_t
 *
__restrict
 
__format
,

712 
__gnuc_va_list
 
__arg
), 
__isoc99_vfwscanf
)

714 extern int 
	`__REDIRECT
 (
vwscanf
, (const 
wchar_t
 *
__restrict
 
__format
,

715 
__gnuc_va_list
 
__arg
), 
__isoc99_vwscanf
)

717 extern int 
	`__REDIRECT_NTH
 (
vswscanf
, (const 
wchar_t
 *
__restrict
 
__s
,

718 const 
wchar_t
 *
__restrict
 
__format
,

719 
__gnuc_va_list
 
__arg
), 
__isoc99_vswscanf
)

722 extern int 
	`__isoc99_vfwscanf
 (
__FILE
 *
__restrict
 
__s
,

723 const 
wchar_t
 *
__restrict
 
__format
,

724 
__gnuc_va_list
 
__arg
);

725 extern int 
	`__isoc99_vwscanf
 (const 
wchar_t
 *
__restrict
 
__format
,

726 
__gnuc_va_list
 
__arg
);

727 extern int 
	$__isoc99_vswscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

728 const 
wchar_t
 *
__restrict
 
__format
,

729 
__gnuc_va_list
 
__arg
) 
__THROW
;

730 #define 
	#vfwscanf
 
__isoc99_vfwscanf


	)

731 #define 
	#vwscanf
 
__isoc99_vwscanf


	)

732 #define 
	#vswscanf
 
__isoc99_vswscanf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 extern 
wint_t
 
	`fgetwc
 (
__FILE
 *
__stream
);

746 extern 
wint_t
 
	`getwc
 (
__FILE
 *
__stream
);

752 extern 
wint_t
 
	`getwchar
 (void);

759 extern 
wint_t
 
	`fputwc
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

760 extern 
wint_t
 
	`putwc
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

766 extern 
wint_t
 
	`putwchar
 (
wchar_t
 
__wc
);

774 extern 
wchar_t
 *
	`fgetws
 (wchar_t *
__restrict
 
__ws
, int 
__n
,

775 
__FILE
 *
__restrict
 
__stream
);

781 extern int 
	`fputws
 (const 
wchar_t
 *
__restrict
 
__ws
,

782 
__FILE
 *
__restrict
 
__stream
);

789 extern 
wint_t
 
	`ungetwc
 (wint_t 
__wc
, 
__FILE
 *
__stream
);

790 
__END_NAMESPACE_STD


793 #ifdef 
__USE_GNU


801 extern 
wint_t
 
	`getwc_unlocked
 (
__FILE
 *
__stream
);

802 extern 
wint_t
 
	`getwchar_unlocked
 (void);

810 extern 
wint_t
 
	`fgetwc_unlocked
 (
__FILE
 *
__stream
);

818 extern 
wint_t
 
	`fputwc_unlocked
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

827 extern 
wint_t
 
	`putwc_unlocked
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

828 extern 
wint_t
 
	`putwchar_unlocked
 (
wchar_t
 
__wc
);

837 extern 
wchar_t
 *
	`fgetws_unlocked
 (wchar_t *
__restrict
 
__ws
, int 
__n
,

838 
__FILE
 *
__restrict
 
__stream
);

846 extern int 
	`fputws_unlocked
 (const 
wchar_t
 *
__restrict
 
__ws
,

847 
__FILE
 *
__restrict
 
__stream
);

851 
__BEGIN_NAMESPACE_C99


855 extern 
size_t
 
	$wcsftime
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__maxsize
,

856 const 
wchar_t
 *
__restrict
 
__format
,

857 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifdef 
__USE_GNU


861 #include 
	~<xlocale.h
>

865 extern 
size_t
 
	$wcsftime_l
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__maxsize
,

866 const 
wchar_t
 *
__restrict
 
__format
,

867 const struct 
tm
 *
__restrict
 
__tp
,

868 
__locale_t
 
__loc
) 
__THROW
;

877 #if 
defined
 
__USE_UNIX98
 && !defined 
__USE_GNU


878 #define 
	#__need_iswxxx


	)

879 #include 
	~<wctype.h
>

883 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


884 #include 
	~<bits/wchar2.h
>

887 #ifdef 
__LDBL_COMPAT


888 #include 
	~<bits/wchar-ldbl.h
>

891 
__END_DECLS


899 #undef 
__need_mbstate_t


900 #undef 
__need_wint_t


	@/usr/include/wctype.h

23 #ifndef 
_WCTYPE_H


25 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 #ifndef 
__need_iswxxx


29 #define 
	#_WCTYPE_H
 1

	)

32 #define 
	#__need_wint_t


	)

33 #include 
	~<wchar.h
>

37 #ifndef 
WEOF


38 #define 
	#WEOF
 (0xffffffffu)

	)

41 #undef 
__need_iswxxx


46 #ifndef 
__iswxxx_defined


47 #define 
	#__iswxxx_defined
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 typedef unsigned long int 
	twctype_t
;

53 
	g__END_NAMESPACE_C99


55 #ifndef 
_ISwbit


60 #include 
	~<endian.h
>

61 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


62 #define 
	#_ISwbit
(
bit
) (1 << (bit))

	)

64 #define 
	#_ISwbit
(
bit
) \

65 ((
bit
) < 8 ? (int) ((1UL << (bit)) << 24) \

66 : ((
bit
) < 16 ? (int) ((1UL << (bit)) << 8) \

67 : ((
bit
) < 24 ? (int) ((1UL << (bit)) >> 8) \

68 : (int) ((1UL << (
bit
)) >> 24))))

	)

73 
	m__ISwupper
 = 0,

74 
	m__ISwlower
 = 1,

75 
	m__ISwalpha
 = 2,

76 
	m__ISwdigit
 = 3,

77 
	m__ISwxdigit
 = 4,

78 
	m__ISwspace
 = 5,

79 
	m__ISwprint
 = 6,

80 
	m__ISwgraph
 = 7,

81 
	m__ISwblank
 = 8,

82 
	m__ISwcntrl
 = 9,

83 
	m__ISwpunct
 = 10,

84 
	m__ISwalnum
 = 11,

86 
	m_ISwupper
 = 
_ISwbit
 (
__ISwupper
),

87 
	m_ISwlower
 = 
_ISwbit
 (
__ISwlower
),

88 
	m_ISwalpha
 = 
_ISwbit
 (
__ISwalpha
),

89 
	m_ISwdigit
 = 
_ISwbit
 (
__ISwdigit
),

90 
	m_ISwxdigit
 = 
_ISwbit
 (
__ISwxdigit
),

91 
	m_ISwspace
 = 
_ISwbit
 (
__ISwspace
),

92 
	m_ISwprint
 = 
_ISwbit
 (
__ISwprint
),

93 
	m_ISwgraph
 = 
_ISwbit
 (
__ISwgraph
),

94 
	m_ISwblank
 = 
_ISwbit
 (
__ISwblank
),

95 
	m_ISwcntrl
 = 
_ISwbit
 (
__ISwcntrl
),

96 
	m_ISwpunct
 = 
_ISwbit
 (
__ISwpunct
),

97 
	m_ISwalnum
 = 
_ISwbit
 (
__ISwalnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 extern int 
	$iswalnum
 (
wint_t
 
__wc
) 
__THROW
;

117 extern int 
	$iswalpha
 (
wint_t
 
__wc
) 
__THROW
;

120 extern int 
	$iswcntrl
 (
wint_t
 
__wc
) 
__THROW
;

124 extern int 
	$iswdigit
 (
wint_t
 
__wc
) 
__THROW
;

128 extern int 
	$iswgraph
 (
wint_t
 
__wc
) 
__THROW
;

133 extern int 
	$iswlower
 (
wint_t
 
__wc
) 
__THROW
;

136 extern int 
	$iswprint
 (
wint_t
 
__wc
) 
__THROW
;

141 extern int 
	$iswpunct
 (
wint_t
 
__wc
) 
__THROW
;

146 extern int 
	$iswspace
 (
wint_t
 
__wc
) 
__THROW
;

151 extern int 
	$iswupper
 (
wint_t
 
__wc
) 
__THROW
;

156 extern int 
	$iswxdigit
 (
wint_t
 
__wc
) 
__THROW
;

161 #ifdef 
__USE_ISOC99


162 extern int 
	$iswblank
 (
wint_t
 
__wc
) 
__THROW
;

171 extern 
wctype_t
 
	$wctype
 (const char *
__property
) 
__THROW
;

175 extern int 
	$iswctype
 (
wint_t
 
__wc
, 
wctype_t
 
__desc
) 
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 typedef const 
	t__int32_t
 *
	twctrans_t
;

187 
__END_NAMESPACE_C99


188 #ifdef 
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
wctrans_t
)

192 
__BEGIN_NAMESPACE_C99


194 extern 
wint_t
 
	$towlower
 (
wint_t
 
__wc
) 
__THROW
;

197 extern 
wint_t
 
	$towupper
 (
wint_t
 
__wc
) 
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifdef 
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 extern 
wctrans_t
 
	$wctrans
 (const char *
__property
) 
__THROW
;

221 extern 
wint_t
 
	$towctrans
 (
wint_t
 
__wc
, 
wctrans_t
 
__desc
) 
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifdef 
__USE_XOPEN2K8


226 #include 
	~<xlocale.h
>

230 extern int 
	$iswalnum_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

236 extern int 
	$iswalpha_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

239 extern int 
	$iswcntrl_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

243 extern int 
	$iswdigit_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

247 extern int 
	$iswgraph_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

252 extern int 
	$iswlower_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

255 extern int 
	$iswprint_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

260 extern int 
	$iswpunct_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

265 extern int 
	$iswspace_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

270 extern int 
	$iswupper_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

275 extern int 
	$iswxdigit_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

280 extern int 
	$iswblank_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

284 extern 
wctype_t
 
	$wctype_l
 (const char *
__property
, 
__locale_t
 
__locale
)

285 
__THROW
;

289 extern int 
	$iswctype_l
 (
wint_t
 
__wc
, 
wctype_t
 
__desc
, 
__locale_t
 
__locale
)

290 
__THROW
;

298 extern 
wint_t
 
	$towlower_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

301 extern 
wint_t
 
	$towupper_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

305 extern 
wctrans_t
 
	$wctrans_l
 (const char *
__property
, 
__locale_t
 
__locale
)

306 
__THROW
;

309 extern 
wint_t
 
	$towctrans_l
 (
wint_t
 
__wc
, 
wctrans_t
 
__desc
,

310 
__locale_t
 
__locale
) 
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
23
511
echo_server.c
/usr/include/arpa/inet.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
